I'll help you design the backend architecture for your Liquor Shop Management System using Kafka, Redis, and Kubernetes to ensure scalability and robustness. I'll provide a comprehensive list of APIs with their required responses and follow best practices.

# Backend Architecture for Liquor Shop Management System

## System Architecture Overview

```
┌─────────────────────────────────────────────────────────────────────┐
│                                                                     │
│                       Client Applications                           │
│    (Web App, Mobile Apps for Executive, Manager, Assistant Manager) │
│                                                                     │
└───────────────────────────────┬─────────────────────────────────────┘
                                │
                                ▼
┌─────────────────────────────────────────────────────────────────────┐
│                                                                     │
│                        API Gateway / Load Balancer                  │
│                                                                     │
└───────┬───────────────┬───────────────────┬───────────────┬─────────┘
        │               │                   │               │
        ▼               ▼                   ▼               ▼
┌───────────────┐ ┌───────────────┐ ┌───────────────┐ ┌───────────────┐
│               │ │               │ │               │ │               │
│   Auth &      │ │   Core        │ │ Inventory     │ │  Financial    │
│   User        │ │   Business    │ │ Management    │ │  Management   │
│   Service     │ │   Service     │ │ Service       │ │  Service      │
│               │ │               │ │               │ │               │
└───────┬───────┘ └───────┬───────┘ └───────┬───────┘ └───────┬───────┘
        │                 │                 │                 │
        └─────────────────┼─────────────────┼─────────────────┘
                          │                 │
                          ▼                 ▼
                   ┌─────────────┐  ┌───────────────┐
                   │             │  │               │
                   │   Kafka     │  │    Redis      │
                   │   Cluster   │  │    Cluster    │
                   │             │  │               │
                   └─────────────┘  └───────────────┘
                          │                 │
                          └─────────────────┘
                                  │
                                  ▼
                   ┌─────────────────────────────┐
                   │                             │
                   │     Persistent Storage      │
                   │     (PostgreSQL Cluster)    │
                   │                             │
                   └─────────────────────────────┘
```

## Microservices Architecture

1. **Auth & User Service**: 
   - Handles authentication, authorization, and user management
   - Manages roles and permissions
   - Handles user profile operations

2. **Core Business Service**:
   - Manages tenant, shop, and business settings
   - Handles approval workflows
   - Coordinates cross-service operations

3. **Inventory Management Service**:
   - Manages brands, products, and suppliers
   - Handles stock adjustments, transfers, and expiry
   - Manages purchase orders and receiving

4. **Financial Management Service**:
   - Handles sales, returns, and cash management
   - Manages deposits, expenses, and reconciliation
   - Handles tax calculations and reporting

5. **Analytics & Reporting Service**:
   - Generates reports and analytics
   - Manages scheduled reports
   - Processes data for dashboards

## Technology Stack

- **Containerization**: Docker for containerizing services
- **Orchestration**: Kubernetes for container orchestration
- **Message Broker**: Apache Kafka for event-driven architecture
- **Caching**: Redis for caching and real-time data
- **Database**: PostgreSQL as primary data store
- **API Gateway**: Kong or Nginx for API routing and load balancing
- **Authentication**: JWT-based authentication with token refresh

## Kubernetes Components

1. **Deployments**: For each microservice
2. **StatefulSets**: For stateful components like Kafka and PostgreSQL
3. **Services**: For service discovery and load balancing
4. **Ingress**: For external access to services
5. **ConfigMaps and Secrets**: For configuration management
6. **Horizontal Pod Autoscalers**: For automatic scaling based on load

## Kafka Topics

1. **user-events**: User creation, updates, and authentication events
2. **sales-events**: Sale creation, approval, and rejection events
3. **inventory-events**: Stock adjustments, transfers, and expiry events
4. **purchase-events**: Purchase order and receiving events
5. **financial-events**: Deposits, expenses, and reconciliation events
6. **approval-events**: Approval workflow events
7. **notification-events**: Events triggering notifications

## Redis Usage

1. **Session Cache**: Store session data and JWT refresh tokens
2. **API Rate Limiting**: Prevent API abuse
3. **Real-time Dashboards**: Cache dashboard data
4. **Inventory Cache**: Cache current inventory levels
5. **Approval Queue**: Store pending approval items
6. **Leaderboards**: Track executive performance metrics

# Comprehensive API List

## Authentication & User Management APIs

### Authentication Endpoints

#### 1. Login API
- **Endpoint**: `POST /api/auth/login`
- **Description**: Authenticates a user and returns access tokens
- **Request Body**:
  ```json
  {
    "email": "user@example.com",
    "password": "securePassword123"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
      "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
      "user": {
        "id": "550e8400-e29b-41d4-a716-446655440000",
        "email": "user@example.com",
        "full_name": "John Doe",
        "role": "manager",
        "tenant_id": "550e8400-e29b-41d4-a716-446655441111",
        "assigned_shops": [
          {
            "id": "550e8400-e29b-41d4-a716-446655442222",
            "name": "Downtown Shop"
          }
        ],
        "permissions": ["approve_sales", "view_inventory", "manage_staff"]
      },
      "expires_in": 3600
    },
    "timestamp": "2025-03-20T10:15:30Z"
  }
  ```

#### 2. Refresh Token API
- **Endpoint**: `POST /api/auth/refresh`
- **Description**: Refreshes the access token using refresh token
- **Request Body**:
  ```json
  {
    "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
      "expires_in": 3600
    },
    "timestamp": "2025-03-20T10:20:30Z"
  }
  ```

#### 3. Logout API
- **Endpoint**: `POST /api/auth/logout`
- **Description**: Invalidates the current user session
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "message": "Logged out successfully",
    "timestamp": "2025-03-20T10:25:30Z"
  }
  ```

#### 4. Password Reset Request
- **Endpoint**: `POST /api/auth/password/reset/request`
- **Description**: Sends password reset email
- **Request Body**:
  ```json
  {
    "email": "user@example.com"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "message": "Password reset instructions sent to your email",
    "timestamp": "2025-03-20T10:30:30Z"
  }
  ```

#### 5. Password Reset Confirm
- **Endpoint**: `POST /api/auth/password/reset/confirm`
- **Description**: Resets password using token
- **Request Body**:
  ```json
  {
    "token": "reset_token_from_email",
    "password": "newSecurePassword123"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "message": "Password has been reset successfully",
    "timestamp": "2025-03-20T10:35:30Z"
  }
  ```

### User Management Endpoints

#### 6. Get Current User
- **Endpoint**: `GET /api/users/me`
- **Description**: Returns current user details
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655440000",
      "email": "user@example.com",
      "full_name": "John Doe",
      "role": "manager",
      "tenant_id": "550e8400-e29b-41d4-a716-446655441111",
      "assigned_shops": [
        {
          "id": "550e8400-e29b-41d4-a716-446655442222",
          "name": "Downtown Shop"
        }
      ],
      "permissions": ["approve_sales", "view_inventory", "manage_staff"],
      "profile_image_url": "https://storage.example.com/profiles/user123.jpg",
      "last_login": "2025-03-20T08:15:30Z",
      "created_at": "2024-01-15T09:30:00Z"
    },
    "timestamp": "2025-03-20T10:40:30Z"
  }
  ```

#### 7. Update User Profile
- **Endpoint**: `PATCH /api/users/me`
- **Description**: Updates current user profile
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "full_name": "John A. Doe",
    "phone": "+919876543210"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655440000",
      "email": "user@example.com",
      "full_name": "John A. Doe",
      "phone": "+919876543210"
    },
    "message": "Profile updated successfully",
    "timestamp": "2025-03-20T10:45:30Z"
  }
  ```

#### 8. Change Password
- **Endpoint**: `POST /api/users/change-password`
- **Description**: Changes user password
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "current_password": "currentPassword123",
    "new_password": "newSecurePassword456"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "message": "Password changed successfully",
    "timestamp": "2025-03-20T10:50:30Z"
  }
  ```

#### 9. Upload Profile Image
- **Endpoint**: `POST /api/users/me/profile-image`
- **Description**: Uploads user profile image
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**: Form data with image file
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "profile_image_url": "https://storage.example.com/profiles/user123_updated.jpg"
    },
    "message": "Profile image uploaded successfully",
    "timestamp": "2025-03-20T10:55:30Z"
  }
  ```

## Tenant Admin APIs

### Tenant Management

#### 10. Get Tenant Details
- **Endpoint**: `GET /api/tenant`
- **Description**: Get current tenant details
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655441111",
      "name": "Skyline Beverages",
      "address": "42 Business Park, Viman Nagar, Pune",
      "city": "Pune",
      "state": "Maharashtra",
      "postal_code": "411014",
      "country": "India",
      "phone": "+919876543200",
      "email": "info@skyline-bev.com",
      "gst_number": "27AADCS9384L1ZV",
      "logo_url": "https://storage.example.com/tenants/skyline.jpg",
      "plan": {
        "id": "plan_premium",
        "name": "Premium",
        "price": 199,
        "billing_cycle": "monthly",
        "features": ["5 shops", "15 users", "all features"]
      },
      "status": "active",
      "created_at": "2023-03-15T09:30:00Z"
    },
    "timestamp": "2025-03-20T11:00:30Z"
  }
  ```

#### 11. Update Tenant Details
- **Endpoint**: `PATCH /api/tenant`
- **Description**: Update tenant information
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "phone": "+919876543201",
    "address": "43 Business Park, Viman Nagar, Pune"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655441111",
      "phone": "+919876543201",
      "address": "43 Business Park, Viman Nagar, Pune"
    },
    "message": "Tenant information updated successfully",
    "timestamp": "2025-03-20T11:05:30Z"
  }
  ```

#### 12. Upload Tenant Logo
- **Endpoint**: `POST /api/tenant/logo`
- **Description**: Upload tenant logo
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**: Form data with image file
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "logo_url": "https://storage.example.com/tenants/skyline_updated.jpg"
    },
    "message": "Tenant logo uploaded successfully",
    "timestamp": "2025-03-20T11:10:30Z"
  }
  ```

### Shop Management

#### 13. List Shops
- **Endpoint**: `GET /api/shops`
- **Description**: Get all shops for current tenant
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**: 
  - `page`: Page number (default: 1)
  - `limit`: Items per page (default: 10)
  - `status`: Filter by status (active/inactive)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "shops": [
        {
          "id": "550e8400-e29b-41d4-a716-446655442222",
          "name": "Downtown Shop",
          "address": "MG Road, Downtown",
          "city": "Pune",
          "phone": "+912233445566",
          "license_number": "LIQ23456789",
          "manager": {
            "id": "550e8400-e29b-41d4-a716-446655443333",
            "name": "Amit Kumar"
          },
          "status": "active",
          "staff_count": 3,
          "today_sales": 37800,
          "mtd_sales": 426400
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655444444",
          "name": "Mall Branch",
          "address": "City Mall, East",
          "city": "Pune",
          "phone": "+912233445567",
          "license_number": "LIQ23456790",
          "manager": {
            "id": "550e8400-e29b-41d4-a716-446655445555",
            "name": "Neha Singh"
          },
          "status": "active",
          "staff_count": 3,
          "today_sales": 28700,
          "mtd_sales": 325600
        }
      ],
      "pagination": {
        "total": 3,
        "page": 1,
        "limit": 10,
        "pages": 1
      }
    },
    "timestamp": "2025-03-20T11:15:30Z"
  }
  ```

#### 14. Create Shop
- **Endpoint**: `POST /api/shops`
- **Description**: Create a new shop
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "name": "Highway Outlet",
    "address": "NH-8, Mile 42",
    "city": "Pune",
    "state": "Maharashtra",
    "postal_code": "411027",
    "phone": "+912233445568",
    "email": "highway@skyline-bev.com",
    "license_number": "LIQ23456791",
    "license_type": "FL-II",
    "license_valid_until": "2026-03-20",
    "operating_hours": {
      "opening_time": "10:00",
      "closing_time": "20:00"
    },
    "manager_id": "550e8400-e29b-41d4-a716-446655446666",
    "daily_target": 20000,
    "monthly_target": 600000
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655447777",
      "name": "Highway Outlet",
      "address": "NH-8, Mile 42",
      "city": "Pune",
      "state": "Maharashtra",
      "postal_code": "411027",
      "phone": "+912233445568",
      "email": "highway@skyline-bev.com",
      "license_number": "LIQ23456791",
      "license_type": "FL-II",
      "license_valid_until": "2026-03-20",
      "operating_hours": {
        "opening_time": "10:00",
        "closing_time": "20:00"
      },
      "manager": {
        "id": "550e8400-e29b-41d4-a716-446655446666",
        "name": "Sunil Verma"
      },
      "daily_target": 20000,
      "monthly_target": 600000,
      "status": "active",
      "created_at": "2025-03-20T11:20:30Z"
    },
    "message": "Shop created successfully",
    "timestamp": "2025-03-20T11:20:30Z"
  }
  ```

#### 15. Get Shop Details
- **Endpoint**: `GET /api/shops/{shop_id}`
- **Description**: Get detailed information for a specific shop
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655442222",
      "name": "Downtown Shop",
      "address": "MG Road, Downtown",
      "city": "Pune",
      "state": "Maharashtra",
      "postal_code": "411001",
      "phone": "+912233445566",
      "email": "downtown@skyline-bev.com",
      "license_number": "LIQ23456789",
      "license_type": "FL-II",
      "license_valid_until": "2026-02-15",
      "operating_hours": {
        "opening_time": "10:00",
        "closing_time": "20:00"
      },
      "manager": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar",
        "phone": "+919876543212",
        "email": "amit.k@example.com"
      },
      "staff": [
        {
          "id": "550e8400-e29b-41d4-a716-446655448888",
          "name": "Rahul Kumar",
          "role": "executive"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655449999",
          "name": "Priya Sharma",
          "role": "executive"
        }
      ],
      "daily_target": 37000,
      "monthly_target": 420000,
      "today_sales": 37800,
      "mtd_sales": 426400,
      "performance": {
        "today_percentage": 102,
        "mtd_percentage": 101
      },
      "inventory_summary": {
        "total_products": 152,
        "low_stock_items": 5,
        "expiring_soon": 3
      },
      "cash_summary": {
        "cash_in_hand": 24200,
        "pending_deposits": 25000,
        "last_deposit": {
          "amount": 10000,
          "date": "2025-03-20T11:20:00Z"
        }
      },
      "status": "active",
      "created_at": "2023-03-16T10:30:00Z"
    },
    "timestamp": "2025-03-20T11:25:30Z"
  }
  ```

#### 16. Update Shop
- **Endpoint**: `PATCH /api/shops/{shop_id}`
- **Description**: Update shop information
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "phone": "+912233445569",
    "manager_id": "550e8400-e29b-41d4-a716-446655443333",
    "daily_target": 38000
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655442222",
      "phone": "+912233445569",
      "manager": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "daily_target": 38000
    },
    "message": "Shop updated successfully",
    "timestamp": "2025-03-20T11:30:30Z"
  }
  ```

#### 17. Deactivate Shop
- **Endpoint**: `POST /api/shops/{shop_id}/deactivate`
- **Description**: Deactivate a shop
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "reason": "Temporary closure for renovation"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655442222",
      "status": "inactive",
      "deactivation_reason": "Temporary closure for renovation",
      "deactivated_at": "2025-03-20T11:35:30Z"
    },
    "message": "Shop deactivated successfully",
    "timestamp": "2025-03-20T11:35:30Z"
  }
  ```

#### 18. Activate Shop
- **Endpoint**: `POST /api/shops/{shop_id}/activate`
- **Description**: Activate a previously deactivated shop
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655442222",
      "status": "active",
      "activated_at": "2025-03-20T11:40:30Z"
    },
    "message": "Shop activated successfully",
    "timestamp": "2025-03-20T11:40:30Z"
  }
  ```

### User Management

#### 19. List Users
- **Endpoint**: `GET /api/users`
- **Description**: Get all users for the tenant
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**: 
  - `page`: Page number (default: 1)
  - `limit`: Items per page (default: 10)
  - `role`: Filter by role (manager/assistant_manager/executive)
  - `shop_id`: Filter by assigned shop
  - `status`: Filter by status (active/inactive)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "users": [
        {
          "id": "550e8400-e29b-41d4-a716-446655443333",
          "full_name": "Amit Kumar",
          "email": "amit.k@example.com",
          "phone": "+919876543212",
          "role": "manager",
          "assigned_shops": [
            {
              "id": "550e8400-e29b-41d4-a716-446655442222",
              "name": "Downtown Shop"
            }
          ],
          "status": "active",
          "last_login": "2025-03-20T08:25:00Z",
          "created_at": "2023-06-10T10:00:00Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655445555",
          "full_name": "Neha Singh",
          "email": "neha.s@example.com",
          "phone": "+919876543213",
          "role": "manager",
          "assigned_shops": [
            {
              "id": "550e8400-e29b-41d4-a716-446655444444",
              "name": "Mall Branch"
            }
          ],
          "status": "active",
          "last_login": "2025-03-20T08:30:00Z",
          "created_at": "2023-06-12T11:00:00Z"
        }
      ],
      "pagination": {
        "total": 8,
        "page": 1,
        "limit": 10,
        "pages": 1
      }
    },
    "timestamp": "2025-03-20T11:45:30Z"
  }
  ```

#### 20. Create User
- **Endpoint**: `POST /api/users`
- **Description**: Create a new user
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "full_name": "Arjun Patel",
    "email": "arjun.p@example.com",
    "phone": "+919876543214",
    "role": "executive",
    "assigned_shop_ids": ["550e8400-e29b-41d4-a716-446655447777"],
    "primary_shop_id": "550e8400-e29b-41d4-a716-446655447777"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655450000",
      "full_name": "Arjun Patel",
      "email": "arjun.p@example.com",
      "phone": "+919876543214",
      "role": "executive",
      "assigned_shops": [
        {
          "id": "550e8400-e29b-41d4-a716-446655447777",
          "name": "Highway Outlet"
        }
      ],
      "primary_shop": {
        "id": "550e8400-e29b-41d4-a716-446655447777",
        "name": "Highway Outlet"
      },
      "status": "active",
      "temporary_password": "Temp123456",
      "created_at": "2025-03-20T11:50:30Z"
    },
    "message": "User created successfully. A welcome email has been sent with login instructions.",
    "timestamp": "2025-03-20T11:50:30Z"
  }
  ```

#### 21. Get User Details
- **Endpoint**: `GET /api/users/{user_id}`
- **Description**: Get detailed information for a specific user
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655448888",
      "full_name": "Rahul Kumar",
      "email": "rahul.k@example.com",
      "phone": "+919876543210",
      "role": "executive",
      "employee_id": "EMP0023",
      "profile_image_url": "https://storage.example.com/profiles/rahul.jpg",
      "assigned_shops": [
        {
          "id": "550e8400-e29b-41d4-a716-446655442222",
          "name": "Downtown Shop"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655444444",
          "name": "Mall Branch"
        }
      ],
      "primary_shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "performance": {
        "today_sales": 15400,
        "mtd_sales": 168350,
        "mtd_target": 160000,
        "mtd_percentage": 105
      },
      "recent_activity": [
        {
          "type": "sale",
          "id": "550e8400-e29b-41d4-a716-446655451111",
          "amount": 15400,
          "timestamp": "2025-03-20T14:35:00Z"
        },
        {
          "type": "stock_adjustment",
          "id": "550e8400-e29b-41d4-a716-446655452222",
          "timestamp": "2025-03-20T13:20:00Z"
        },
        {
          "type": "bank_deposit",
          "id": "550e8400-e29b-41d4-a716-446655453333",
          "amount": 25000,
          "timestamp": "2025-03-20T16:05:00Z"
        }
      ],
      "status": "active",
      "last_login": "2025-03-20T08:45:00Z",
      "created_at": "2023-06-15T09:00:00Z"
    },
    "timestamp": "2025-03-20T11:55:30Z"
  }
  ```
Let me continue with the remaining API specifications:

#### 22. Update User
- **Endpoint**: `PATCH /api/users/{user_id}`
- **Description**: Update user information
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "full_name": "Rahul Kumar Singh",
    "phone": "+919876543215",
    "role": "assistant_manager"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655448888",
      "full_name": "Rahul Kumar Singh",
      "phone": "+919876543215",
      "role": "assistant_manager"
    },
    "message": "User updated successfully",
    "timestamp": "2025-03-20T12:00:30Z"
  }
  ```

#### 23. Deactivate User
- **Endpoint**: `POST /api/users/{user_id}/deactivate`
- **Description**: Deactivate a user
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "reason": "No longer with the company"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655448888",
      "status": "inactive",
      "deactivation_reason": "No longer with the company",
      "deactivated_at": "2025-03-20T12:05:30Z"
    },
    "message": "User deactivated successfully",
    "timestamp": "2025-03-20T12:05:30Z"
  }
  ```

#### 24. Activate User
- **Endpoint**: `POST /api/users/{user_id}/activate`
- **Description**: Activate a previously deactivated user
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655448888",
      "status": "active",
      "activated_at": "2025-03-20T12:10:30Z"
    },
    "message": "User activated successfully",
    "timestamp": "2025-03-20T12:10:30Z"
  }
  ```

#### 25. Assign Shops to User
- **Endpoint**: `POST /api/users/{user_id}/assign-shops`
- **Description**: Assign shops to a user
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "shop_ids": [
      "550e8400-e29b-41d4-a716-446655442222",
      "550e8400-e29b-41d4-a716-446655444444"
    ],
    "primary_shop_id": "550e8400-e29b-41d4-a716-446655442222"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655448888",
      "assigned_shops": [
        {
          "id": "550e8400-e29b-41d4-a716-446655442222",
          "name": "Downtown Shop"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655444444",
          "name": "Mall Branch"
        }
      ],
      "primary_shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      }
    },
    "message": "Shops assigned successfully",
    "timestamp": "2025-03-20T12:15:30Z"
  }
  ```

### Brand & Product Management

#### 26. List Brands
- **Endpoint**: `GET /api/brands`
- **Description**: Get all brands
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**: 
  - `page`: Page number (default: 1)
  - `limit`: Items per page (default: 10)
  - `category`: Filter by category (whisky/beer/rum/etc)
  - `status`: Filter by status (active/inactive)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "brands": [
        {
          "id": "550e8400-e29b-41d4-a716-446655454444",
          "name": "Royal Stag Premium",
          "category": "whisky",
          "size": "750ml",
          "regular_price": 650,
          "discount_price": 620,
          "purchase_price": 580,
          "mrp": 680,
          "tax_rate": 18,
          "status": "active",
          "inventory_count": {
            "total": 71,
            "by_shop": {
              "Downtown Shop": 18,
              "Mall Branch": 25,
              "Highway Outlet": 28
            }
          }
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655455555",
          "name": "Kingfisher Strong",
          "category": "beer",
          "size": "650ml",
          "regular_price": 160,
          "discount_price": 140,
          "purchase_price": 130,
          "mrp": 180,
          "tax_rate": 18,
          "status": "active",
          "inventory_count": {
            "total": 120,
            "by_shop": {
              "Downtown Shop": 12,
              "Mall Branch": 68,
              "Highway Outlet": 40
            }
          }
        }
      ],
      "pagination": {
        "total": 152,
        "page": 1,
        "limit": 10,
        "pages": 16
      }
    },
    "timestamp": "2025-03-20T12:20:30Z"
  }
  ```

#### 27. Create Brand
- **Endpoint**: `POST /api/brands`
- **Description**: Create a new brand
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "name": "Absolut Vodka",
    "description": "Premium imported vodka",
    "category": "vodka",
    "size": "750ml",
    "mrp": 1800,
    "purchase_price": 1500,
    "regular_price": 1720,
    "discount_price": 1650,
    "tax_category_id": "550e8400-e29b-41d4-a716-446655456666",
    "supplier_id": "550e8400-e29b-41d4-a716-446655457777",
    "min_stock_level": 10,
    "reorder_quantity": 24
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655458888",
      "name": "Absolut Vodka",
      "description": "Premium imported vodka",
      "category": "vodka",
      "size": "750ml",
      "mrp": 1800,
      "purchase_price": 1500,
      "regular_price": 1720,
      "discount_price": 1650,
      "tax_category": {
        "id": "550e8400-e29b-41d4-a716-446655456666",
        "name": "Premium GST",
        "rate": 28
      },
      "supplier": {
        "id": "550e8400-e29b-41d4-a716-446655457777",
        "name": "Pernod Ricard"
      },
      "min_stock_level": 10,
      "reorder_quantity": 24,
      "margins": {
        "regular": 12.75,
        "discount": 9.09
      },
      "status": "active",
      "created_at": "2025-03-20T12:25:30Z"
    },
    "message": "Brand created successfully",
    "timestamp": "2025-03-20T12:25:30Z"
  }
  ```

#### 28. Get Brand Details
- **Endpoint**: `GET /api/brands/{brand_id}`
- **Description**: Get detailed information for a specific brand
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655454444",
      "name": "Royal Stag Premium",
      "description": "Popular Indian whisky",
      "category": "whisky",
      "size": "750ml",
      "image_url": "https://storage.example.com/brands/royal-stag.jpg",
      "mrp": 680,
      "purchase_price": 580,
      "regular_price": 650,
      "discount_price": 620,
      "tax_category": {
        "id": "550e8400-e29b-41d4-a716-446655459999",
        "name": "Standard GST",
        "rate": 18
      },
      "supplier": {
        "id": "550e8400-e29b-41d4-a716-446655460000",
        "name": "Pernod Ricard",
        "contact_person": "Rajesh Kumar",
        "phone": "+919876543210"
      },
      "inventory": {
        "total": 71,
        "by_shop": [
          {
            "shop_id": "550e8400-e29b-41d4-a716-446655442222",
            "shop_name": "Downtown Shop",
            "quantity": 18,
            "min_level": 20,
            "status": "low"
          },
          {
            "shop_id": "550e8400-e29b-41d4-a716-446655444444",
            "shop_name": "Mall Branch",
            "quantity": 25,
            "min_level": 20,
            "status": "ok"
          },
          {
            "shop_id": "550e8400-e29b-41d4-a716-446655447777",
            "shop_name": "Highway Outlet",
            "quantity": 28,
            "min_level": 20,
            "status": "ok"
          }
        ]
      },
      "sales_performance": {
        "last_30_days": {
          "units": 84,
          "amount": 54600
        },
        "mtd": {
          "units": 65,
          "amount": 42250
        },
        "rank_in_category": 1
      },
      "min_stock_level": 20,
      "reorder_quantity": 48,
      "margins": {
        "regular": 10.7,
        "discount": 6.5
      },
      "status": "active",
      "created_at": "2023-03-20T14:30:00Z",
      "updated_at": "2025-02-15T10:20:00Z"
    },
    "timestamp": "2025-03-20T12:30:30Z"
  }
  ```

#### 29. Update Brand
- **Endpoint**: `PATCH /api/brands/{brand_id}`
- **Description**: Update brand information
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "regular_price": 670,
    "discount_price": 640,
    "min_stock_level": 25
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655454444",
      "regular_price": 670,
      "discount_price": 640,
      "min_stock_level": 25,
      "margins": {
        "regular": 13.4,
        "discount": 9.4
      }
    },
    "message": "Brand updated successfully",
    "timestamp": "2025-03-20T12:35:30Z"
  }
  ```

#### 30. Upload Brand Image
- **Endpoint**: `POST /api/brands/{brand_id}/image`
- **Description**: Upload brand image
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**: Form data with image file
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "image_url": "https://storage.example.com/brands/royal-stag-updated.jpg"
    },
    "message": "Brand image uploaded successfully",
    "timestamp": "2025-03-20T12:40:30Z"
  }
  ```

#### 31. Deactivate Brand
- **Endpoint**: `POST /api/brands/{brand_id}/deactivate`
- **Description**: Deactivate a brand
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "reason": "Discontinued by supplier"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655454444",
      "status": "inactive",
      "deactivation_reason": "Discontinued by supplier",
      "deactivated_at": "2025-03-20T12:45:30Z"
    },
    "message": "Brand deactivated successfully",
    "timestamp": "2025-03-20T12:45:30Z"
  }
  ```

#### 32. Activate Brand
- **Endpoint**: `POST /api/brands/{brand_id}/activate`
- **Description**: Activate a previously deactivated brand
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655454444",
      "status": "active",
      "activated_at": "2025-03-20T12:50:30Z"
    },
    "message": "Brand activated successfully",
    "timestamp": "2025-03-20T12:50:30Z"
  }
  ```

#### 33. Bulk Update Brand Prices
- **Endpoint**: `POST /api/brands/bulk-update-prices`
- **Description**: Update prices for multiple brands at once
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "update_type": "percentage",
    "value": 5,
    "direction": "increase",
    "target_fields": ["regular_price", "discount_price"],
    "filters": {
      "category": "whisky",
      "supplier_id": "550e8400-e29b-41d4-a716-446655460000"
    },
    "brand_ids": [
      "550e8400-e29b-41d4-a716-446655454444",
      "550e8400-e29b-41d4-a716-446655461111"
    ],
    "effective_date": "2025-04-01",
    "require_approval": true
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "update_id": "550e8400-e29b-41d4-a716-446655462222",
      "affected_brands": 2,
      "preview": [
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655454444",
          "name": "Royal Stag Premium",
          "old_regular_price": 670,
          "new_regular_price": 703.5,
          "old_discount_price": 640,
          "new_discount_price": 672
        },
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655461111",
          "name": "Blenders Pride",
          "old_regular_price": 800,
          "new_regular_price": 840,
          "old_discount_price": 780,
          "new_discount_price": 819
        }
      ],
      "status": "pending_approval",
      "effective_date": "2025-04-01",
      "submitted_at": "2025-03-20T12:55:30Z"
    },
    "message": "Bulk price update submitted for approval",
    "timestamp": "2025-03-20T12:55:30Z"
  }
  ```

### Inventory Management

#### 34. Get Stock Levels
- **Endpoint**: `GET /api/inventory/stock`
- **Description**: Get current stock levels
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `shop_id`: Filter by shop (optional)
  - `category`: Filter by category (whisky/beer/rum/etc)
  - `low_stock`: Show only low stock items (true/false)
  - `page`: Page number (default: 1)
  - `limit`: Items per page (default: 10)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "stock": [
        {
          "id": "550e8400-e29b-41d4-a716-446655463333",
          "brand": {
            "id": "550e8400-e29b-41d4-a716-446655454444",
            "name": "Royal Stag Premium",
            "category": "whisky",
            "size": "750ml"
          },
          "shop": {
            "id": "550e8400-e29b-41d4-a716-446655442222",
            "name": "Downtown Shop"
          },
          "quantity": 18,
          "min_level": 25,
          "status": "low",
          "purchase_price": 580,
          "selling_price": 670,
          "seven_day_sales": 84,
          "latest_batch": "BT45873",
          "expiry_date": "2026-03-15"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655464444",
          "brand": {
            "id": "550e8400-e29b-41d4-a716-446655455555",
            "name": "Kingfisher Strong",
            "category": "beer",
            "size": "650ml"
          },
          "shop": {
            "id": "550e8400-e29b-41d4-a716-446655442222",
            "name": "Downtown Shop"
          },
          "quantity": 12,
          "min_level": 40,
          "status": "critical",
          "purchase_price": 130,
          "selling_price": 160,
          "seven_day_sales": 120,
          "latest_batch": "BT42190",
          "expiry_date": "2025-05-10"
        }
      ],
      "pagination": {
        "total": 306,
        "page": 1,
        "limit": 10,
        "pages": 31
      }
    },
    "timestamp": "2025-03-20T13:00:30Z"
  }
  ```

#### 35. Create/Update Stock
- **Endpoint**: `POST /api/inventory/stock`
- **Description**: Create or update stock for a brand in a shop
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "shop_id": "550e8400-e29b-41d4-a716-446655442222",
    "brand_id": "550e8400-e29b-41d4-a716-446655454444",
    "quantity": 50,
    "batch": "BT47890",
    "expiry_date": "2026-04-15",
    "purchase_price": 580,
    "selling_price": 670
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655463333",
      "brand": {
        "id": "550e8400-e29b-41d4-a716-446655454444",
        "name": "Royal Stag Premium"
      },
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "previous_quantity": 18,
      "new_quantity": 50,
      "batch": "BT47890",
      "expiry_date": "2026-04-15",
      "purchase_price": 580,
      "selling_price": 670,
      "status": "ok",
      "updated_at": "2025-03-20T13:05:30Z"
    },
    "message": "Stock updated successfully",
    "timestamp": "2025-03-20T13:05:30Z"
  }
  ```

#### 36. Create Stock Adjustment
- **Endpoint**: `POST /api/inventory/adjustments`
- **Description**: Create a stock adjustment request
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "shop_id": "550e8400-e29b-41d4-a716-446655442222",
    "reason": "Daily closing stock count",
    "items": [
      {
        "brand_id": "550e8400-e29b-41d4-a716-446655454444",
        "previous_quantity": 50,
        "new_quantity": 46,
        "breakdown": {
          "regular_sale": 2,
          "discount_sale": 1,
          "discount_price": 620,
          "breakage": 1
        }
      },
      {
        "brand_id": "550e8400-e29b-41d4-a716-446655455555",
        "previous_quantity": 12,
        "new_quantity": 6,
        "breakdown": {
          "regular_sale": 4,
          "discount_sale": 2,
          "discount_price": 140
        }
      }
    ]
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655465555",
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "reason": "Daily closing stock count",
      "items": [
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655454444",
          "brand_name": "Royal Stag Premium",
          "previous_quantity": 50,
          "new_quantity": 46,
          "difference": -4,
          "breakdown": {
            "regular_sale": 2,
            "discount_sale": 1,
            "discount_price": 620,
            "breakage": 1
          }
        },
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655455555",
          "brand_name": "Kingfisher Strong",
          "previous_quantity": 12,
          "new_quantity": 6,
          "difference": -6,
          "breakdown": {
            "regular_sale": 4,
            "discount_sale": 2,
            "discount_price": 140
          }
        }
      ],
      "total_items": 2,
      "status": "pending",
      "submitted_by": {
        "id": "550e8400-e29b-41d4-a716-446655448888",
        "name": "Rahul Kumar"
      },
      "submitted_at": "2025-03-20T13:10:30Z"
    },
    "message": "Stock adjustment submitted for approval",
    "timestamp": "2025-03-20T13:10:30Z"
  }
  ```

#### 37. Get Adjustment Details
- **Endpoint**: `GET /api/inventory/adjustments/{adjustment_id}`
- **Description**: Get details of a specific stock adjustment
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655465555",
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "reason": "Daily closing stock count",
      "items": [
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655454444",
          "brand_name": "Royal Stag Premium",
          "previous_quantity": 50,
          "new_quantity": 46,
          "difference": -4,
          "breakdown": {
            "regular_sale": 2,
            "discount_sale": 1,
            "discount_price": 620,
            "breakage": 1
          }
        },
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655455555",
          "brand_name": "Kingfisher Strong",
          "previous_quantity": 12,
          "new_quantity": 6,
          "difference": -6,
          "breakdown": {
            "regular_sale": 4,
            "discount_sale": 2,
            "discount_price": 140
          }
        }
      ],
      "total_items": 2,
      "status": "pending",
      "submitted_by": {
        "id": "550e8400-e29b-41d4-a716-446655448888",
        "name": "Rahul Kumar"
      },
      "submitted_at": "2025-03-20T13:10:30Z",
      "approval": {
        "required_level": "manager",
        "current_approver": {
          "id": "550e8400-e29b-41d4-a716-446655443333",
          "name": "Amit Kumar"
        },
        "waiting_time": "1h 40m"
      }
    },
    "timestamp": "2025-03-20T13:15:30Z"
  }
  ```

#### 38. Approve Stock Adjustment
- **Endpoint**: `POST /api/inventory/adjustments/{adjustment_id}/approve`
- **Description**: Approve a stock adjustment
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "comments": "All adjustments verified against sales records."
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655465555",
      "status": "approved",
      "approved_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "approval_comments": "All adjustments verified against sales records.",
      "approved_at": "2025-03-20T13:20:30Z"
    },
    "message": "Stock adjustment approved successfully",
    "timestamp": "2025-03-20T13:20:30Z"
  }
  ```

#### 39. Reject Stock Adjustment
- **Endpoint**: `POST /api/inventory/adjustments/{adjustment_id}/reject`
- **Description**: Reject a stock adjustment
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "reason": "Incorrect count for Royal Stag Premium",
    "comments": "Please recount and resubmit with correct quantities."
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655465555",
      "status": "rejected",
      "rejected_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "rejection_reason": "Incorrect count for Royal Stag Premium",
      "rejection_comments": "Please recount and resubmit with correct quantities.",
      "rejected_at": "2025-03-20T13:25:30Z"
    },
    "message": "Stock adjustment rejected",
    "timestamp": "2025-03-20T13:25:30Z"
  }
  ```

## Comprehensive API List (Continued)

#### 40. Create Stock Transfer (Continued)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655466666",
      "from_shop": {
        "id": "550e8400-e29b-41d4-a716-446655444444",
        "name": "Mall Branch"
      },
      "to_shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "transfer_date": "2025-03-20",
      "reason": "Addressing low stock at Downtown Shop",
      "items": [
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655455555",
          "brand_name": "Kingfisher Strong",
          "quantity": 40,
          "source_stock": 68,
          "destination_stock": 6,
          "source_after_transfer": 28,
          "destination_after_transfer": 46
        },
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655461111",
          "brand_name": "Old Monk",
          "quantity": 15,
          "source_stock": 22,
          "destination_stock": 8,
          "source_after_transfer": 7,
          "destination_after_transfer": 23
        }
      ],
      "transport_method": "Company Vehicle",
      "handled_by": "Suresh (Driver)",
      "status": "pending",
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "created_at": "2025-03-20T13:30:30Z"
    },
    "message": "Stock transfer created successfully",
    "timestamp": "2025-03-20T13:30:30Z"
  }
  ```

#### 41. Get Stock Transfer Details
- **Endpoint**: `GET /api/inventory/transfers/{transfer_id}`
- **Description**: Get details of a specific stock transfer
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655466666",
      "from_shop": {
        "id": "550e8400-e29b-41d4-a716-446655444444",
        "name": "Mall Branch"
      },
      "to_shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "transfer_date": "2025-03-20",
      "reason": "Addressing low stock at Downtown Shop",
      "items": [
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655455555",
          "brand_name": "Kingfisher Strong",
          "quantity": 40,
          "source_stock": 68,
          "destination_stock": 6,
          "source_after_transfer": 28,
          "destination_after_transfer": 46
        },
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655461111",
          "brand_name": "Old Monk",
          "quantity": 15,
          "source_stock": 22,
          "destination_stock": 8,
          "source_after_transfer": 7,
          "destination_after_transfer": 23
        }
      ],
      "transport_method": "Company Vehicle",
      "handled_by": "Suresh (Driver)",
      "status": "in_transit",
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "created_at": "2025-03-20T13:30:30Z",
      "updated_at": "2025-03-20T13:35:30Z"
    },
    "timestamp": "2025-03-20T13:40:30Z"
  }
  ```

#### 42. Approve Stock Transfer
- **Endpoint**: `POST /api/inventory/transfers/{transfer_id}/approve`
- **Description**: Approve a stock transfer at the receiving end
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "comments": "All items received in good condition"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655466666",
      "status": "completed",
      "approved_by": {
        "id": "550e8400-e29b-41d4-a716-446655467777",
        "name": "Priya Singh"
      },
      "approval_comments": "All items received in good condition",
      "approved_at": "2025-03-20T14:00:30Z"
    },
    "message": "Stock transfer approved successfully",
    "timestamp": "2025-03-20T14:00:30Z"
  }
  ```

#### 43. Cancel Stock Transfer
- **Endpoint**: `POST /api/inventory/transfers/{transfer_id}/cancel`
- **Description**: Cancel a pending stock transfer
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "reason": "Transfer no longer required",
    "comments": "Stock levels have been adjusted through other means"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655466666",
      "status": "cancelled",
      "cancelled_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "cancellation_reason": "Transfer no longer required",
      "cancellation_comments": "Stock levels have been adjusted through other means",
      "cancelled_at": "2025-03-20T14:05:30Z"
    },
    "message": "Stock transfer cancelled successfully",
    "timestamp": "2025-03-20T14:05:30Z"
  }
  ```

#### 44. Get Expiring Stock
- **Endpoint**: `GET /api/inventory/expiring`
- **Description**: Get products that are nearing expiry
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `shop_id`: Filter by shop (optional)
  - `days`: Number of days to check for expiry (default: 30)
  - `page`: Page number (default: 1)
  - `limit`: Items per page (default: 10)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "expiring_items": [
        {
          "id": "550e8400-e29b-41d4-a716-446655468888",
          "shop": {
            "id": "550e8400-e29b-41d4-a716-446655442222",
            "name": "Downtown Shop"
          },
          "brand": {
            "id": "550e8400-e29b-41d4-a716-446655455555",
            "name": "Kingfisher Strong",
            "category": "beer"
          },
          "batch": "BT42190",
          "quantity": 24,
          "expiry_date": "2025-04-10",
          "days_to_expiry": 21,
          "status": "expiring_soon"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655469999",
          "shop": {
            "id": "550e8400-e29b-41d4-a716-446655444444",
            "name": "Mall Branch"
          },
          "brand": {
            "id": "550e8400-e29b-41d4-a716-446655455555",
            "name": "Kingfisher Strong",
            "category": "beer"
          },
          "batch": "BT42180",
          "quantity": 15,
          "expiry_date": "2025-04-05",
          "days_to_expiry": 16,
          "status": "expiring_soon"
        }
      ],
      "pagination": {
        "total": 8,
        "page": 1,
        "limit": 10,
        "pages": 1
      }
    },
    "timestamp": "2025-03-20T14:10:30Z"
  }
  ```

#### 45. Report Expired Products
- **Endpoint**: `POST /api/inventory/expired`
- **Description**: Report products that have expired
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "shop_id": "550e8400-e29b-41d4-a716-446655442222",
    "items": [
      {
        "stock_id": "550e8400-e29b-41d4-a716-446655470000",
        "quantity": 3,
        "disposal_method": "destroy",
        "comments": "Product past expiry date"
      }
    ]
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655471111",
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "items": [
        {
          "stock_id": "550e8400-e29b-41d4-a716-446655470000",
          "brand_name": "Kingfisher Strong",
          "quantity": 3,
          "disposal_method": "destroy",
          "comments": "Product past expiry date"
        }
      ],
      "reported_by": {
        "id": "550e8400-e29b-41d4-a716-446655448888",
        "name": "Rahul Kumar Singh"
      },
      "reported_at": "2025-03-20T14:15:30Z",
      "status": "pending_approval"
    },
    "message": "Expired products reported successfully",
    "timestamp": "2025-03-20T14:15:30Z"
  }
  ```

### Sales Management APIs

#### 46. Create Sale
- **Endpoint**: `POST /api/sales`
- **Description**: Create a new sale record
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "shop_id": "550e8400-e29b-41d4-a716-446655442222",
    "items": [
      {
        "brand_id": "550e8400-e29b-41d4-a716-446655454444",
        "quantity": 2,
        "price_type": "regular",
        "price": 670
      },
      {
        "brand_id": "550e8400-e29b-41d4-a716-446655455555",
        "quantity": 5,
        "price_type": "discount",
        "price": 140,
        "discount_reason": "Bulk purchase"
      }
    ],
    "discount": {
      "amount": 50,
      "reason": "Loyal customer"
    },
    "payment_method": "cash"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655472222",
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "invoice_number": "INV-20250320-0042",
      "items": [
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655454444",
          "brand_name": "Royal Stag Premium",
          "quantity": 2,
          "price_type": "regular",
          "unit_price": 670,
          "total_price": 1340,
          "tax_amount": 241.2
        },
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655455555",
          "brand_name": "Kingfisher Strong",
          "quantity": 5,
          "price_type": "discount",
          "unit_price": 140,
          "total_price": 700,
          "tax_amount": 126,
          "discount_reason": "Bulk purchase"
        }
      ],
      "subtotal": 2040,
      "discount": {
        "amount": 50,
        "reason": "Loyal customer"
      },
      "tax_total": 367.2,
      "grand_total": 2357.2,
      "payment_method": "cash",
      "status": "pending",
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655448888",
        "name": "Rahul Kumar Singh"
      },
      "created_at": "2025-03-20T14:20:30Z"
    },
    "message": "Sale created successfully",
    "timestamp": "2025-03-20T14:20:30Z"
  }
  ```

#### 47. Get Sale Details
- **Endpoint**: `GET /api/sales/{sale_id}`
- **Description**: Get detailed information for a specific sale
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655472222",
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "invoice_number": "INV-20250320-0042",
      "items": [
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655454444",
          "brand_name": "Royal Stag Premium",
          "quantity": 2,
          "price_type": "regular",
          "unit_price": 670,
          "total_price": 1340,
          "tax_amount": 241.2
        },
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655455555",
          "brand_name": "Kingfisher Strong",
          "quantity": 5,
          "price_type": "discount",
          "unit_price": 140,
          "total_price": 700,
          "tax_amount": 126,
          "discount_reason": "Bulk purchase"
        }
      ],
      "subtotal": 2040,
      "discount": {
        "amount": 50,
        "reason": "Loyal customer"
      },
      "tax_total": 367.2,
      "grand_total": 2357.2,
      "payment_method": "cash",
      "status": "approved",
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655448888",
        "name": "Rahul Kumar Singh"
      },
      "created_at": "2025-03-20T14:20:30Z",
      "approved_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "approved_at": "2025-03-20T14:30:30Z"
    },
    "timestamp": "2025-03-20T14:35:30Z"
  }
  ```

#### 48. List Sales
- **Endpoint**: `GET /api/sales`
- **Description**: Get a list of sales
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `shop_id`: Filter by shop (optional)
  - `date`: Filter by date (optional)
  - `status`: Filter by status (pending/approved/rejected)
  - `payment_method`: Filter by payment method (cash/upi/card)
  - `page`: Page number (default: 1)
  - `limit`: Items per page (default: 10)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "sales": [
        {
          "id": "550e8400-e29b-41d4-a716-446655472222",
          "invoice_number": "INV-20250320-0042",
          "shop": {
            "id": "550e8400-e29b-41d4-a716-446655442222",
            "name": "Downtown Shop"
          },
          "created_at": "2025-03-20T14:20:30Z",
          "grand_total": 2357.2,
          "payment_method": "cash",
          "status": "approved",
          "created_by": {
            "id": "550e8400-e29b-41d4-a716-446655448888",
            "name": "Rahul Kumar Singh"
          }
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655473333",
          "invoice_number": "INV-20250320-0041",
          "shop": {
            "id": "550e8400-e29b-41d4-a716-446655442222",
            "name": "Downtown Shop"
          },
          "created_at": "2025-03-20T14:10:30Z",
          "grand_total": 1540,
          "payment_method": "upi",
          "status": "approved",
          "created_by": {
            "id": "550e8400-e29b-41d4-a716-446655448888",
            "name": "Rahul Kumar Singh"
          }
        }
      ],
      "pagination": {
        "total": 42,
        "page": 1,
        "limit": 10,
        "pages": 5
      }
    },
    "timestamp": "2025-03-20T14:40:30Z"
  }
  ```

#### 49. Approve Sale
- **Endpoint**: `POST /api/sales/{sale_id}/approve`
- **Description**: Approve a pending sale
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "comments": "Sale verified and approved"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655472222",
      "status": "approved",
      "approved_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "approval_comments": "Sale verified and approved",
      "approved_at": "2025-03-20T14:45:30Z"
    },
    "message": "Sale approved successfully",
    "timestamp": "2025-03-20T14:45:30Z"
  }
  ```

#### 50. Reject Sale
- **Endpoint**: `POST /api/sales/{sale_id}/reject`
- **Description**: Reject a pending sale
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "reason": "Incorrect pricing for Royal Stag Premium",
    "comments": "Please verify prices and resubmit"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655472222",
      "status": "rejected",
      "rejected_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "rejection_reason": "Incorrect pricing for Royal Stag Premium",
      "rejection_comments": "Please verify prices and resubmit",
      "rejected_at": "2025-03-20T14:50:30Z"
    },
    "message": "Sale rejected",
    "timestamp": "2025-03-20T14:50:30Z"
  }
  ```

#### 51. Create Return
- **Endpoint**: `POST /api/returns`
- **Description**: Create a product return
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "shop_id": "550e8400-e29b-41d4-a716-446655442222",
    "reference_sale_id": "550e8400-e29b-41d4-a716-446655472222",
    "items": [
      {
        "brand_id": "550e8400-e29b-41d4-a716-446655454444",
        "quantity": 1,
        "reason": "Seal broken",
        "condition": "unopened"
      }
    ],
    "refund_method": "cash",
    "comments": "Customer reported seal broken"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655474444",
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "reference_sale": {
        "id": "550e8400-e29b-41d4-a716-446655472222",
        "invoice_number": "INV-20250320-0042"
      },
      "return_number": "RET-20250320-0005",
      "items": [
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655454444",
          "brand_name": "Royal Stag Premium",
          "quantity": 1,
          "reason": "Seal broken",
          "condition": "unopened",
          "unit_price": 670,
          "total_price": 670,
          "tax_amount": 120.6
        }
      ],
      "subtotal": 670,
      "tax_total": 120.6,
      "grand_total": 790.6,
      "refund_method": "cash",
      "comments": "Customer reported seal broken",
      "status": "pending",
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655448888",
        "name": "Rahul Kumar Singh"
      },
      "created_at": "2025-03-20T14:55:30Z"
    },
    "message": "Return created successfully",
    "timestamp": "2025-03-20T14:55:30Z"
  }
  ```

#### 52. Approve Return
- **Endpoint**: `POST /api/returns/{return_id}/approve`
- **Description**: Approve a pending return
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "comments": "Verified and approved the return"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655474444",
      "status": "approved",
      "approved_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "approval_comments": "Verified and approved the return",
      "approved_at": "2025-03-20T15:00:30Z"
    },
    "message": "Return approved successfully",
    "timestamp": "2025-03-20T15:00:30Z"
  }
  ```

### Cash Management APIs

#### 53. Record Bank Deposit
- **Endpoint**: `POST /api/cash/deposits`
- **Description**: Record a bank deposit
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "shop_id": "550e8400-e29b-41d4-a716-446655442222",
    "amount": 25000,
    "deposit_date": "2025-03-20",
    "deposit_time": "16:30",
    "bank_name": "State Bank of India",
    "account_number": "XXXXXXXX1234",
    "reference_number": "DEP87654321",
    "deposit_by": "Rahul Kumar Singh",
    "remarks": "Deposit for March 20 sales"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655475555",
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "amount": 25000,
      "deposit_date": "2025-03-20",
      "deposit_time": "16:30",
      "bank_name": "State Bank of India",
      "account_number": "XXXXXXXX1234",
      "reference_number": "DEP87654321",
      "deposit_by": "Rahul Kumar Singh",
      "remarks": "Deposit for March 20 sales",
      "status": "pending_verification",
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655448888",
        "name": "Rahul Kumar Singh"
      },
      "created_at": "2025-03-20T15:05:30Z"
    },
    "message": "Bank deposit recorded successfully",
    "timestamp": "2025-03-20T15:05:30Z"
  }
  ```

#### 54. Verify Bank Deposit
- **Endpoint**: `POST /api/cash/deposits/{deposit_id}/verify`
- **Description**: Verify a bank deposit
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "comments": "Deposit receipt verified"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655475555",
      "status": "verified",
      "verified_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "verification_comments": "Deposit receipt verified",
      "verified_at": "2025-03-20T15:10:30Z"
    },
    "message": "Bank deposit verified successfully",
    "timestamp": "2025-03-20T15:10:30Z"
  }
  ```

#### 55. Record UPI Transaction
- **Endpoint**: `POST /api/cash/upi-transactions`
- **Description**: Record a UPI transaction
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "shop_id": "550e8400-e29b-41d4-a716-446655442222",
    "amount": 15000,
    "transaction_date": "2025-03-20",
    "transaction_time": "17:15",
    "upi_id": "shop.downtown@sbi",
    "reference_number": "UPI123456789",
    "remarks": "UPI transfer for March 20 sales"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655476666",
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "amount": 15000,
      "transaction_date": "2025-03-20",
      "transaction_time": "17:15",
      "upi_id": "shop.downtown@sbi",
      "reference_number": "UPI123456789",
      "remarks": "UPI transfer for March 20 sales",
      "status": "pending_verification",
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655448888",
        "name": "Rahul Kumar Singh"
      },
      "created_at": "2025-03-20T15:15:30Z"
    },
    "message": "UPI transaction recorded successfully",
    "timestamp": "2025-03-20T15:15:30Z"
  }
  ```

#### 56. Verify UPI Transaction
- **Endpoint**: `POST /api/cash/upi-transactions/{transaction_id}/verify`
- **Description**: Verify a UPI transaction
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "comments": "UPI screenshot verified"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655476666",
      "status": "verified",
      "verified_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "verification_comments": "UPI screenshot verified",
      "verified_at": "2025-03-20T15:20:30Z"
    },
    "message": "UPI transaction verified successfully",
    "timestamp": "2025-03-20T15:20:30Z"
  }
  ```

#### 57. Record Expense
- **Endpoint**: `POST /api/cash/expenses`
- **Description**: Record a shop expense
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "shop_id": "550e8400-e29b-41d4-a716-446655442222",
    "amount": 500,
    "expense_date": "2025-03-20",
    "category": "utilities",
    "payment_method": "cash",
    "description": "Electricity bill payment",
    "reference_number": "ELEC78901"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655477777",
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "amount": 500,
      "expense_date": "2025-03-20",
      "category": "utilities",
      "payment_method": "cash",
      "description": "Electricity bill payment",
      "reference_number": "ELEC78901",
      "status": "pending_approval",
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655448888",
        "name": "Rahul Kumar Singh"
      },
      "created_at": "2025-03-20T15:25:30Z"
    },
    "message": "Expense recorded successfully",
    "timestamp": "2025-03-20T15:25:30Z"
  }
  ```

#### 58. Approve Expense
- **Endpoint**: `POST /api/cash/expenses/{expense_id}/approve`
- **Description**: Approve a pending expense
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "comments": "Receipt verified and expense approved"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655477777",
      "status": "approved",
      "approved_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "approval_comments": "Receipt verified and expense approved",
      "approved_at": "2025-03-20T15:30:30Z"
    },
    "message": "Expense approved successfully",
    "timestamp": "2025-03-20T15:30:30Z"
  }
  ```

### Daily Operations APIs

#### 59. Executive Daily Login
- **Endpoint**: `POST /api/operations/daily-login`
- **Description**: Record executive's daily login with opening balance
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "shop_id": "550e8400-e29b-41d4-a716-446655442222",
    "login_date": "2025-03-21",
    "login_time": "09:00",
    "opening_cash": 2000,
    "remarks": "Opening day with float amount"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655478888",
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "executive": {
        "id": "550e8400-e29b-41d4-a716-446655448888",
        "name": "Rahul Kumar Singh"
      },
      "login_date": "2025-03-21",
      "login_time": "09:00",
      "opening_cash": 2000,
      "remarks": "Opening day with float amount",
      "status": "active",
      "created_at": "2025-03-21T09:00:30Z"
    },
    "message": "Daily login recorded successfully",
    "timestamp": "2025-03-21T09:00:30Z"
  }
  ```

#### 60. Executive Daily Logout
- **Endpoint**: `POST /api/operations/daily-logout`
- **Description**: Record executive's daily logout with closing balance
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "shop_id": "550e8400-e29b-41d4-a716-446655442222",
    "closing_cash": 37500,
    "logout_time": "20:00",
    "summary": {
      "total_sales": 42000,
      "cash_sales": 35000,
      "upi_sales": 7000,
      "expenses": 500,
      "returns": 2000
    },
    "remarks": "Successful day with good sales"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655479999",
      "daily_login": {
        "id": "550e8400-e29b-41d4-a716-446655478888",
        "login_time": "09:00"
      },
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "executive": {
        "id": "550e8400-e29b-41d4-a716-446655448888",
        "name": "Rahul Kumar Singh"
      },
      "logout_date": "2025-03-21",
      "logout_time": "20:00",
      "opening_cash": 2000,
      "closing_cash": 37500,
      "expected_cash": 37500,
      "cash_difference": 0,
      "summary": {
        "total_sales": 42000,
        "cash_sales": 35000,
        "upi_sales": 7000,
        "expenses": 500,
        "returns": 2000
      },
      "remarks": "Successful day with good sales",
      "status": "pending_approval",
      "created_at": "2025-03-21T20:00:30Z"
    },
    "message": "Daily logout recorded successfully",
    "timestamp": "2025-03-21T20:00:30Z"
  }
  ```

#### 61. Approve Daily Summary
- **Endpoint**: `POST /api/operations/daily-summary/{summary_id}/approve`
- **Description**: Approve executive's daily summary
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "comments": "All transactions verified and approved"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655479999",
      "status": "approved",
      "approved_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "approval_comments": "All transactions verified and approved",
      "approved_at": "2025-03-21T21:00:30Z"
    },
    "message": "Daily summary approved successfully",
    "timestamp": "2025-03-21T21:00:30Z"
  }
  ```

### Reports & Analytics APIs

#### 62. Generate Report
- **Endpoint**: `POST /api/reports`
- **Description**: Generate a custom report
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "report_type": "sales",
    "parameters": {
      "shop_ids": ["550e8400-e29b-41d4-a716-446655442222"],
      "start_date": "2025-03-01",
      "end_date": "2025-03-21",
      "group_by": "brand",
      "include_tax_details": true
    },
    "format": "pdf",
    "name": "March Sales by Brand"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655480000",
      "name": "March Sales by Brand",
      "report_type": "sales",
      "parameters": {
        "shop_ids": ["550e8400-e29b-41d4-a716-446655442222"],
        "start_date": "2025-03-01",
        "end_date": "2025-03-21",
        "group_by": "brand",
        "include_tax_details": true
      },
      "format": "pdf",
      "status": "processing",
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "created_at": "2025-03-21T09:05:30Z",
      "estimated_completion": "2025-03-21T09:10:30Z"
    },
    "message": "Report generation started",
    "timestamp": "2025-03-21T09:05:30Z"
  }
  ```

#### 63. Get Report Status
- **Endpoint**: `GET /api/reports/{report_id}`
- **Description**: Get status of a report generation task
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655480000",
      "name": "March Sales by Brand",
      "report_type": "sales",
      "parameters": {
        "shop_ids": ["550e8400-e29b-41d4-a716-446655442222"],
        "start_date": "2025-03-01",
        "end_date": "2025-03-21",
        "group_by": "brand",
        "include_tax_details": true
      },
      "format": "pdf",
      "status": "completed",
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "created_at": "2025-03-21T09:05:30Z",
      "completed_at": "2025-03-21T09:08:30Z",
      "download_url": "/api/reports/550e8400-e29b-41d4-a716-446655480000/download",
      "file_size": 1245336,
      "page_count": 8
    },
    "timestamp": "2025-03-21T09:10:30Z"
  }
  ```

#### 64. Schedule Report
- **Endpoint**: `POST /api/reports/schedules`
- **Description**: Schedule a recurring report
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "name": "Monthly Sales Summary",
    "report_type": "sales_summary",
    "parameters": {
      "shop_ids": ["550e8400-e29b-41d4-a716-446655442222", "550e8400-e29b-41d4-a716-446655444444"],
      "include_tax_details": true,
      "include_brand_breakdown": true
    },
    "format": "pdf",
    "schedule": {
      "frequency": "monthly",
      "day": 1,
      "time": "01:00"
    },
    "recipients": [
      {
        "email": "manager@example.com",
        "name": "Shop Manager"
      }
    ],
    "is_active": true
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655481111",
      "name": "Monthly Sales Summary",
      "report_type": "sales_summary",
      "parameters": {
        "shop_ids": ["550e8400-e29b-41d4-a716-446655442222", "550e8400-e29b-41d4-a716-446655444444"],
        "include_tax_details": true,
        "include_brand_breakdown": true
      },
      "format": "pdf",
      "schedule": {
        "frequency": "monthly",
        "day": 1,
        "time": "01:00"
      },
      "recipients": [
        {
          "email": "manager@example.com",
          "name": "Shop Manager"
        }
      ],
      "is_active": true,
      "next_run": "2025-04-01T01:00:00Z",
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "created_at": "2025-03-21T09:15:30Z"
    },
    "message": "Report schedule created successfully",
    "timestamp": "2025-03-21T09:15:30Z"
  }
  ```

#### 65. Get Sales Analytics
- **Endpoint**: `GET /api/analytics/sales`
- **Description**: Get sales analytics data
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `shop_ids`: Comma-separated shop IDs (optional)
  - `start_date`: Start date (default: 30 days ago)
  - `end_date`: End date (default: today)
  - `group_by`: Group by parameter (day/week/month/brand/category)
  - `compare_with`: Previous period to compare with (previous_period/same_period_last_year)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "total_sales": 1247800,
      "total_items_sold": 3560,
      "average_transaction_value": 2150.5,
      "comparison": {
        "period": "previous_period",
        "total_sales_change": 12.5,
        "total_items_sold_change": 8.3,
        "average_transaction_value_change": 4.2
      },
      "top_brands": [
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655454444",
          "brand_name": "Royal Stag Premium",
          "total_sales": 245600,
          "total_items_sold": 376,
          "percentage_of_sales": 19.68
        },
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655455555",
          "brand_name": "Kingfisher Strong",
          "total_sales": 178500,
          "total_items_sold": 1125,
          "percentage_of_sales": 14.30
        }
      ],
      "top_categories": [
        {
          "category": "whisky",
          "total_sales": 585400,
          "total_items_sold": 896,
          "percentage_of_sales": 46.91
        },
        {
          "category": "beer",
          "total_sales": 352100,
          "total_items_sold": 2101,
          "percentage_of_sales": 28.22
        }
      ],
      "sales_trend": [
        {
          "date": "2025-03-01",
          "total_sales": 42500,
          "total_items_sold": 122
        },
        {
          "date": "2025-03-02",
          "total_sales": 38900,
          "total_items_sold": 111
        }
      ]
    },
    "timestamp": "2025-03-21T09:20:30Z"
  }
  ```
## Complete API List (Continued)

### Supplier Management APIs

#### 66. List Suppliers
- **Endpoint**: `GET /api/suppliers`
- **Description**: Get all suppliers
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**: 
  - `page`: Page number (default: 1)
  - `limit`: Items per page (default: 10)
  - `status`: Filter by status (active/inactive)
  - `search`: Search term for supplier name
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "suppliers": [
        {
          "id": "550e8400-e29b-41d4-a716-446655460000",
          "name": "Pernod Ricard",
          "contact_person": "Rajesh Kumar",
          "phone": "+919876543210",
          "email": "rajesh@pernodricard.com",
          "address": "123 Business Park, Mumbai, Maharashtra",
          "status": "active",
          "brand_count": 12,
          "last_order_date": "2025-03-15T10:30:00Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655457777",
          "name": "United Spirits",
          "contact_person": "Sunil Verma",
          "phone": "+919876543211",
          "email": "sunil@unitedspirits.com",
          "address": "456 Corporate Center, Bangalore, Karnataka",
          "status": "active",
          "brand_count": 8,
          "last_order_date": "2025-03-10T11:45:00Z"
        }
      ],
      "pagination": {
        "total": 15,
        "page": 1,
        "limit": 10,
        "pages": 2
      }
    },
    "timestamp": "2025-03-21T09:25:30Z"
  }
  ```

#### 67. Create Supplier
- **Endpoint**: `POST /api/suppliers`
- **Description**: Create a new supplier
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "name": "Bacardi India",
    "contact_person": "Ajay Mehta",
    "phone": "+919876543212",
    "email": "ajay@bacardiindia.com",
    "address": "789 Business Hub, Delhi, Delhi",
    "gst_number": "27AABCB1234C1Z5",
    "payment_terms": "Net 30",
    "credit_limit": 500000,
    "bank_details": {
      "account_name": "Bacardi India Pvt Ltd",
      "account_number": "12345678901",
      "bank_name": "HDFC Bank",
      "ifsc_code": "HDFC0001234"
    }
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655482222",
      "name": "Bacardi India",
      "contact_person": "Ajay Mehta",
      "phone": "+919876543212",
      "email": "ajay@bacardiindia.com",
      "address": "789 Business Hub, Delhi, Delhi",
      "gst_number": "27AABCB1234C1Z5",
      "payment_terms": "Net 30",
      "credit_limit": 500000,
      "bank_details": {
        "account_name": "Bacardi India Pvt Ltd",
        "account_number": "12345678901",
        "bank_name": "HDFC Bank",
        "ifsc_code": "HDFC0001234"
      },
      "status": "active",
      "created_at": "2025-03-21T09:30:30Z"
    },
    "message": "Supplier created successfully",
    "timestamp": "2025-03-21T09:30:30Z"
  }
  ```

#### 68. Get Supplier Details
- **Endpoint**: `GET /api/suppliers/{supplier_id}`
- **Description**: Get detailed information for a specific supplier
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655460000",
      "name": "Pernod Ricard",
      "contact_person": "Rajesh Kumar",
      "phone": "+919876543210",
      "email": "rajesh@pernodricard.com",
      "address": "123 Business Park, Mumbai, Maharashtra",
      "gst_number": "27AADCR9876A1Z9",
      "payment_terms": "Net 15",
      "credit_limit": 1000000,
      "bank_details": {
        "account_name": "Pernod Ricard India Pvt Ltd",
        "account_number": "98765432101",
        "bank_name": "ICICI Bank",
        "ifsc_code": "ICIC0005678"
      },
      "brands": [
        {
          "id": "550e8400-e29b-41d4-a716-446655454444",
          "name": "Royal Stag Premium",
          "category": "whisky",
          "purchase_price": 580,
          "mrp": 680
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655461111",
          "name": "Blenders Pride",
          "category": "whisky",
          "purchase_price": 730,
          "mrp": 850
        }
      ],
      "order_history": {
        "total_orders": 24,
        "total_amount": 8756000,
        "last_order": {
          "id": "550e8400-e29b-41d4-a716-446655483333",
          "order_date": "2025-03-15T10:30:00Z",
          "amount": 420000,
          "status": "delivered"
        }
      },
      "payment_history": {
        "total_payments": 22,
        "total_amount_paid": 8356000,
        "outstanding_amount": 400000,
        "last_payment": {
          "id": "550e8400-e29b-41d4-a716-446655484444",
          "payment_date": "2025-03-10T14:20:00Z",
          "amount": 350000
        }
      },
      "status": "active",
      "created_at": "2023-05-15T09:30:00Z",
      "updated_at": "2025-03-15T10:30:00Z"
    },
    "timestamp": "2025-03-21T09:35:30Z"
  }
  ```

#### 69. Update Supplier
- **Endpoint**: `PATCH /api/suppliers/{supplier_id}`
- **Description**: Update supplier information
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "contact_person": "Anil Kumar",
    "phone": "+919876543213",
    "payment_terms": "Net 20",
    "credit_limit": 1200000
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655460000",
      "contact_person": "Anil Kumar",
      "phone": "+919876543213",
      "payment_terms": "Net 20",
      "credit_limit": 1200000
    },
    "message": "Supplier updated successfully",
    "timestamp": "2025-03-21T09:40:30Z"
  }
  ```

#### 70. Deactivate Supplier
- **Endpoint**: `POST /api/suppliers/{supplier_id}/deactivate`
- **Description**: Deactivate a supplier
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "reason": "No longer doing business with this supplier",
    "comments": "Moving to alternative supplier with better terms"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655460000",
      "status": "inactive",
      "deactivation_reason": "No longer doing business with this supplier",
      "deactivation_comments": "Moving to alternative supplier with better terms",
      "deactivated_at": "2025-03-21T09:45:30Z"
    },
    "message": "Supplier deactivated successfully",
    "timestamp": "2025-03-21T09:45:30Z"
  }
  ```

#### 71. Activate Supplier
- **Endpoint**: `POST /api/suppliers/{supplier_id}/activate`
- **Description**: Activate a previously deactivated supplier
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655460000",
      "status": "active",
      "activated_at": "2025-03-21T09:50:30Z"
    },
    "message": "Supplier activated successfully",
    "timestamp": "2025-03-21T09:50:30Z"
  }
  ```

#### 72. Add Supplier Contact
- **Endpoint**: `POST /api/suppliers/{supplier_id}/contacts`
- **Description**: Add a new contact for a supplier
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "name": "Meena Sharma",
    "designation": "Accounts Manager",
    "phone": "+919876543214",
    "email": "meena@pernodricard.com",
    "is_primary": false
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655485555",
      "supplier_id": "550e8400-e29b-41d4-a716-446655460000",
      "name": "Meena Sharma",
      "designation": "Accounts Manager",
      "phone": "+919876543214",
      "email": "meena@pernodricard.com",
      "is_primary": false,
      "created_at": "2025-03-21T09:55:30Z"
    },
    "message": "Supplier contact added successfully",
    "timestamp": "2025-03-21T09:55:30Z"
  }
  ```

### Purchase Order Management APIs

#### 73. List Purchase Orders
- **Endpoint**: `GET /api/purchase/orders`
- **Description**: Get all purchase orders
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**: 
  - `page`: Page number (default: 1)
  - `limit`: Items per page (default: 10)
  - `status`: Filter by status (draft/submitted/approved/received/cancelled)
  - `supplier_id`: Filter by supplier
  - `shop_id`: Filter by shop
  - `start_date`: Filter by start date
  - `end_date`: Filter by end date
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "purchase_orders": [
        {
          "id": "550e8400-e29b-41d4-a716-446655483333",
          "po_number": "PO-20250315-0012",
          "supplier": {
            "id": "550e8400-e29b-41d4-a716-446655460000",
            "name": "Pernod Ricard"
          },
          "shop": {
            "id": "550e8400-e29b-41d4-a716-446655442222",
            "name": "Downtown Shop"
          },
          "order_date": "2025-03-15T10:30:00Z",
          "expected_delivery_date": "2025-03-22",
          "total_amount": 420000,
          "status": "delivered",
          "created_by": {
            "id": "550e8400-e29b-41d4-a716-446655443333",
            "name": "Amit Kumar"
          }
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655486666",
          "po_number": "PO-20250320-0013",
          "supplier": {
            "id": "550e8400-e29b-41d4-a716-446655457777",
            "name": "United Spirits"
          },
          "shop": {
            "id": "550e8400-e29b-41d4-a716-446655444444",
            "name": "Mall Branch"
          },
          "order_date": "2025-03-20T11:45:00Z",
          "expected_delivery_date": "2025-03-27",
          "total_amount": 385000,
          "status": "approved",
          "created_by": {
            "id": "550e8400-e29b-41d4-a716-446655445555",
            "name": "Neha Singh"
          }
        }
      ],
      "pagination": {
        "total": 35,
        "page": 1,
        "limit": 10,
        "pages": 4
      }
    },
    "timestamp": "2025-03-21T10:00:30Z"
  }
  ```

#### 74. Create Purchase Order
- **Endpoint**: `POST /api/purchase/orders`
- **Description**: Create a new purchase order
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "supplier_id": "550e8400-e29b-41d4-a716-446655482222",
    "shop_id": "550e8400-e29b-41d4-a716-446655442222",
    "expected_delivery_date": "2025-03-28",
    "items": [
      {
        "brand_id": "550e8400-e29b-41d4-a716-446655487777",
        "quantity": 50,
        "purchase_price": 800
      },
      {
        "brand_id": "550e8400-e29b-41d4-a716-446655488888",
        "quantity": 30,
        "purchase_price": 650
      }
    ],
    "shipping_address": "123 Main St, Downtown, Pune",
    "payment_terms": "Net 30",
    "notes": "Please deliver between 10 AM and 5 PM"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655489999",
      "po_number": "PO-20250321-0014",
      "supplier": {
        "id": "550e8400-e29b-41d4-a716-446655482222",
        "name": "Bacardi India"
      },
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "expected_delivery_date": "2025-03-28",
      "items": [
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655487777",
          "brand_name": "Bacardi White Rum",
          "quantity": 50,
          "purchase_price": 800,
          "total_price": 40000
        },
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655488888",
          "brand_name": "Grey Goose Vodka",
          "quantity": 30,
          "purchase_price": 650,
          "total_price": 19500
        }
      ],
      "subtotal": 59500,
      "tax_amount": 10710,
      "total_amount": 70210,
      "shipping_address": "123 Main St, Downtown, Pune",
      "payment_terms": "Net 30",
      "notes": "Please deliver between 10 AM and 5 PM",
      "status": "draft",
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "created_at": "2025-03-21T10:05:30Z"
    },
    "message": "Purchase order created successfully",
    "timestamp": "2025-03-21T10:05:30Z"
  }
  ```

#### 75. Get Purchase Order Details
- **Endpoint**: `GET /api/purchase/orders/{order_id}`
- **Description**: Get detailed information for a specific purchase order
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655489999",
      "po_number": "PO-20250321-0014",
      "supplier": {
        "id": "550e8400-e29b-41d4-a716-446655482222",
        "name": "Bacardi India",
        "contact_person": "Ajay Mehta",
        "phone": "+919876543212",
        "email": "ajay@bacardiindia.com"
      },
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop",
        "address": "MG Road, Downtown, Pune",
        "phone": "+912233445569"
      },
      "order_date": "2025-03-21T10:05:30Z",
      "expected_delivery_date": "2025-03-28",
      "items": [
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655487777",
          "brand_name": "Bacardi White Rum",
          "quantity": 50,
          "purchase_price": 800,
          "total_price": 40000,
          "current_stock": 18
        },
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655488888",
          "brand_name": "Grey Goose Vodka",
          "quantity": 30,
          "purchase_price": 650,
          "total_price": 19500,
          "current_stock": 5
        }
      ],
      "subtotal": 59500,
      "tax_amount": 10710,
      "total_amount": 70210,
      "shipping_address": "123 Main St, Downtown, Pune",
      "payment_terms": "Net 30",
      "notes": "Please deliver between 10 AM and 5 PM",
      "attachments": [],
      "status": "submitted",
      "status_history": [
        {
          "status": "draft",
          "timestamp": "2025-03-21T10:05:30Z",
          "user": {
            "id": "550e8400-e29b-41d4-a716-446655443333",
            "name": "Amit Kumar"
          }
        },
        {
          "status": "submitted",
          "timestamp": "2025-03-21T10:10:30Z",
          "user": {
            "id": "550e8400-e29b-41d4-a716-446655443333",
            "name": "Amit Kumar"
          }
        }
      ],
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "created_at": "2025-03-21T10:05:30Z",
      "updated_at": "2025-03-21T10:10:30Z"
    },
    "timestamp": "2025-03-21T10:15:30Z"
  }
  ```

#### 76. Update Purchase Order
- **Endpoint**: `PATCH /api/purchase/orders/{order_id}`
- **Description**: Update a purchase order (only in draft status)
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "expected_delivery_date": "2025-03-29",
    "items": [
      {
        "brand_id": "550e8400-e29b-41d4-a716-446655487777",
        "quantity": 60,
        "purchase_price": 780
      }
    ],
    "notes": "Please deliver between 9 AM and 6 PM"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655489999",
      "expected_delivery_date": "2025-03-29",
      "items": [
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655487777",
          "brand_name": "Bacardi White Rum",
          "quantity": 60,
          "purchase_price": 780,
          "total_price": 46800
        },
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655488888",
          "brand_name": "Grey Goose Vodka",
          "quantity": 30,
          "purchase_price": 650,
          "total_price": 19500
        }
      ],
      "subtotal": 66300,
      "tax_amount": 11934,
      "total_amount": 78234,
      "notes": "Please deliver between 9 AM and 6 PM"
    },
    "message": "Purchase order updated successfully",
    "timestamp": "2025-03-21T10:20:30Z"
  }
  ```

#### 77. Submit Purchase Order
- **Endpoint**: `POST /api/purchase/orders/{order_id}/submit`
- **Description**: Submit a draft purchase order for approval
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655489999",
      "status": "submitted",
      "submitted_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "submitted_at": "2025-03-21T10:25:30Z"
    },
    "message": "Purchase order submitted successfully",
    "timestamp": "2025-03-21T10:25:30Z"
  }
  ```

#### 78. Approve Purchase Order
- **Endpoint**: `POST /api/purchase/orders/{order_id}/approve`
- **Description**: Approve a submitted purchase order
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "comments": "Approved after verifying current stock levels"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655489999",
      "status": "approved",
      "approved_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "approval_comments": "Approved after verifying current stock levels",
      "approved_at": "2025-03-21T10:30:30Z"
    },
    "message": "Purchase order approved successfully",
    "timestamp": "2025-03-21T10:30:30Z"
  }
  ```

#### 79. Reject Purchase Order
- **Endpoint**: `POST /api/purchase/orders/{order_id}/reject`
- **Description**: Reject a submitted purchase order
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "reason": "Budget constraints",
    "comments": "Please reduce the order quantity and resubmit"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655489999",
      "status": "rejected",
      "rejected_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "rejection_reason": "Budget constraints",
      "rejection_comments": "Please reduce the order quantity and resubmit",
      "rejected_at": "2025-03-21T10:35:30Z"
    },
    "message": "Purchase order rejected",
    "timestamp": "2025-03-21T10:35:30Z"
  }
  ```

#### 80. Cancel Purchase Order
- **Endpoint**: `POST /api/purchase/orders/{order_id}/cancel`
- **Description**: Cancel a purchase order
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "reason": "Supplier unavailable",
    "comments": "Supplier has stock issues, will order from alternative supplier"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655489999",
      "status": "cancelled",
      "cancelled_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "cancellation_reason": "Supplier unavailable",
      "cancellation_comments": "Supplier has stock issues, will order from alternative supplier",
      "cancelled_at": "2025-03-21T10:40:30Z"
    },
    "message": "Purchase order cancelled successfully",
    "timestamp": "2025-03-21T10:40:30Z"
  }
  ```

#### 81. Receive Purchase Order
- **Endpoint**: `POST /api/purchase/orders/{order_id}/receive`
- **Description**: Record receipt of items from a purchase order
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "receipt_date": "2025-03-25",
    "received_items": [
      {
        "brand_id": "550e8400-e29b-41d4-a716-446655487777",
        "quantity": 60,
        "batch": "BAC2503001",
        "expiry_date": "2026-03-25"
      },
      {
        "brand_id": "550e8400-e29b-41d4-a716-446655488888",
        "quantity": 30,
        "batch": "GG2503001",
        "expiry_date": "2027-03-25"
      }
    ],
    "invoice_number": "INV-BAC-8765",
    "invoice_date": "2025-03-24",
    "invoice_amount": 78234,
    "notes": "All items received in good condition"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655490000",
      "purchase_order": {
        "id": "550e8400-e29b-41d4-a716-446655489999",
        "po_number": "PO-20250321-0014"
      },
      "receipt_number": "GRN-20250325-0008",
      "receipt_date": "2025-03-25",
      "received_items": [
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655487777",
          "brand_name": "Bacardi White Rum",
          "quantity": 60,
          "batch": "BAC2503001",
          "expiry_date": "2026-03-25",
          "previous_stock": 18,
          "new_stock": 78
        },
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655488888",
          "brand_name": "Grey Goose Vodka",
          "quantity": 30,
          "batch": "GG2503001",
          "expiry_date": "2027-03-25",
          "previous_stock": 5,
          "new_stock": 35
        }
      ],
      "invoice": {
        "number": "INV-BAC-8765",
        "date": "2025-03-24",
        "amount": 78234
      },
      "notes": "All items received in good condition",
      "received_by": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar"
      },
      "received_at": "2025-03-25T11:30:00Z",
      "status": "completed"
    },
    "message": "Purchase order received successfully",
    "timestamp": "2025-03-25T11:30:00Z"
  }
  ```

### Tax Management APIs

#### 82. List Tax Categories
- **Endpoint**: `GET /api/taxes/categories`
- **Description**: Get all tax categories
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "categories": [
        {
          "id": "550e8400-e29b-41d4-a716-446655459999",
          "name": "Standard GST",
          "rate": 18,
          "description": "Standard GST rate for most liquor products",
          "is_default": true,
          "created_at": "2023-03-01T10:00:00Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655456666",
          "name": "Premium GST",
          "rate": 28,
          "description": "Higher GST rate for premium imported products",
          "is_default": false,
          "created_at": "2023-03-01T10:05:00Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655491111",
          "name": "Beer GST",
          "rate": 15,
          "description": "Lower GST rate for beer products",
          "is_default": false,
          "created_at": "2023-03-01T10:10:00Z"
        }
      ]
    },
    "timestamp": "2025-03-21T10:45:30Z"
  }
  ```

#### 83. Create Tax Category
- **Endpoint**: `POST /api/taxes/categories`
- **Description**: Create a new tax category
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "name": "Special Category",
    "rate": 22,
    "description": "Special tax rate for specific products",
    "is_default": false
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655492222",
      "name": "Special Category",
      "rate": 22,
      "description": "Special tax rate for specific products",
      "is_default": false,
      "created_at": "2025-03-21T10:50:30Z"
    },
    "message": "Tax category created successfully",
    "timestamp": "2025-03-21T10:50:30Z"
  }
  ```

#### 84. Update Tax Category
- **Endpoint**: `PATCH /api/taxes/categories/{category_id}`
- **Description**: Update a tax category
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "name": "Special GST",
    "rate": 24,
    "description": "Updated tax rate for specialty products"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655492222",
      "name": "Special GST",
      "rate": 24,
      "description": "Updated tax rate for specialty products"
    },
    "message": "Tax category updated successfully",
    "timestamp": "2025-03-21T10:55:30Z"
  }
  ```

#### 85. Delete Tax Category
- **Endpoint**: `DELETE /api/taxes/categories/{category_id}`
- **Description**: Delete a tax category
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "message": "Tax category deleted successfully",
    "timestamp": "2025-03-21T11:00:30Z"
  }
  ```

#### 86. Assign Tax Category to Brands
- **Endpoint**: `POST /api/taxes/assign`
- **Description**: Assign tax category to multiple brands
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "tax_category_id": "550e8400-e29b-41d4-a716-446655492222",
    "brand_ids": [
      "550e8400-e29b-41d4-a716-446655493333",
      "550e8400-e29b-41d4-a716-446655494444"
    ]
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "tax_category": {
        "id": "550e8400-e29b-41d4-a716-446655492222",
        "name": "Special GST",
        "rate": 24
      },
      "brands": [
        {
          "id": "550e8400-e29b-41d4-a716-446655493333",
          "name": "Johnnie Walker Black Label"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655494444",
          "name": "Jack Daniel's Old No. 7"
        }
      ],
      "affected_count": 2
    },
    "message": "Tax category assigned to brands successfully",
    "timestamp": "2025-03-21T11:05:30Z"
  }
  ```

#### 87. Get Tax Reports
- **Endpoint**: `GET /api/taxes/reports`
- **Description**: Get tax collection reports
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `shop_id`: Filter by shop (optional)
  - `start_date`: Start date (required)
  - `end_date`: End date (required)
  - `tax_category`: Filter by tax category (optional)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "period": {
        "start_date": "2025-03-01",
        "end_date": "2025-03-21"
      },
      "summary": {
        "total_sales": 3568450,
        "total_tax_collected": 642321,
        "total_transactions": 1250
      },
      "by_category": [
        {
          "category": {
            "id": "550e8400-e29b-41d4-a716-446655459999",
            "name": "Standard GST",
            "rate": 18
          },
          "taxable_amount": 2245680,
          "tax_collected": 404222,
          "transaction_count": 860
        },
        {
          "category": {
            "id": "550e8400-e29b-41d4-a716-446655456666",
            "name": "Premium GST",
            "rate": 28
          },
          "taxable_amount": 724650,
          "tax_collected": 202902,
          "transaction_count": 245
        },
        {
          "category": {
            "id": "550e8400-e29b-41d4-a716-446655491111",
            "name": "Beer GST",
            "rate": 15
          },
          "taxable_amount": 234800,
          "tax_collected": 35220,
          "transaction_count": 145
        }
      ],
      "by_shop": [
        {
          "shop": {
            "id": "550e8400-e29b-41d4-a716-446655442222",
            "name": "Downtown Shop"
          },
          "taxable_amount": 1845700,
          "tax_collected": 332226,
          "transaction_count": 650
        },
        {
          "shop": {
            "id": "550e8400-e29b-41d4-a716-446655444444",
            "name": "Mall Branch"
          },
          "taxable_amount": 1158950,
          "tax_collected": 208611,
          "transaction_count": 425
        },
        {
          "shop": {
            "id": "550e8400-e29b-41d4-a716-446655447777",
            "name": "Highway Outlet"
          },
          "taxable_amount": 563800,
          "tax_collected": 101484,
          "transaction_count": 175
        }
      ],
      "daily_trend": [
        {
          "date": "2025-03-01",
          "taxable_amount": 120450,
          "tax_collected": 21681
        },
        {
          "date": "2025-03-02",
          "taxable_amount": 105800,
          "tax_collected": 19044
        }
      ]
    },
    "timestamp": "2025-03-21T11:10:30Z"
  }
  ```

### SaaS Admin APIs

#### 88. List All Tenants
- **Endpoint**: `GET /api/admin/tenants`
- **Description**: Get a list of all tenants (SaaS Admin only)
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `page`: Page number (default: 1)
  - `limit`: Items per page (default: 10)
  - `status`: Filter by status (active/inactive/pending)
  - `search`: Search by tenant name or admin email
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "tenants": [
        {
          "id": "550e8400-e29b-41d4-a716-446655441111",
          "name": "Skyline Beverages",
          "admin_name": "John Doe",
          "admin_email": "john@skyline-bev.com",
          "phone": "+919876543200",
          "city": "Pune",
          "state": "Maharashtra",
          "plan": {
            "id": "plan_premium",
            "name": "Premium"
          },
          "shops_count": 3,
          "users_count": 12,
          "created_at": "2023-03-15T09:30:00Z",
          "status": "active"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655495555",
          "name": "Metro Liquors",
          "admin_name": "Jane Smith",
          "admin_email": "jane@metroliquors.com",
          "phone": "+919876543201",
          "city": "Mumbai",
          "state": "Maharashtra",
          "plan": {
            "id": "plan_basic",
            "name": "Basic"
          },
          "shops_count": 1,
          "users_count": 4,
          "created_at": "2024-01-10T10:15:00Z",
          "status": "active"
        }
      ],
      "pagination": {
        "total": 45,
        "page": 1,
        "limit": 10,
        "pages": 5
      }
    },
    "timestamp": "2025-03-21T11:15:30Z"
  }
  ```

#### 89. Create Tenant
- **Endpoint**: `POST /api/admin/tenants`
- **Description**: Create a new tenant (SaaS Admin only)
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "name": "City Wines & Spirits",
    "admin_name": "Robert Johnson",
    "admin_email": "robert@citywines.com",
    "admin_phone": "+919876543202",
    "address": "789 Main Boulevard, Bangalore",
    "city": "Bangalore",
    "state": "Karnataka",
    "postal_code": "560001",
    "country": "India",
    "plan_id": "plan_standard",
    "gst_number": "29AADCW1234B1Z5"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655496666",
      "name": "City Wines & Spirits",
      "admin": {
        "id": "550e8400-e29b-41d4-a716-446655497777",
        "name": "Robert Johnson",
        "email": "robert@citywines.com",
        "phone": "+919876543202",
        "temporary_password": "Temp987654"
      },
      "address": "789 Main Boulevard, Bangalore",
      "city": "Bangalore",
      "state": "Karnataka",
      "postal_code": "560001",
      "country": "India",
      "plan": {
        "id": "plan_standard",
        "name": "Standard",
        "features": ["3 shops", "10 users", "standard features"]
      },
      "gst_number": "29AADCW1234B1Z5",
      "status": "active",
      "created_at": "2025-03-21T11:20:30Z"
    },
    "message": "Tenant created successfully. Welcome email has been sent to the admin.",
    "timestamp": "2025-03-21T11:20:30Z"
  }
  ```

#### 90. Get Tenant Details
- **Endpoint**: `GET /api/admin/tenants/{tenant_id}`
- **Description**: Get detailed information for a specific tenant (SaaS Admin only)
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655441111",
      "name": "Skyline Beverages",
      "admin": {
        "id": "550e8400-e29b-41d4-a716-446655498888",
        "name": "John Doe",
        "email": "john@skyline-bev.com",
        "phone": "+919876543200"
      },
      "address": "42 Business Park, Viman Nagar, Pune",
      "city": "Pune",
      "state": "Maharashtra",
      "postal_code": "411014",
      "country": "India",
      "phone": "+919876543200",
      "email": "info@skyline-bev.com",
      "gst_number": "27AADCS9384L1ZV",
      "logo_url": "https://storage.example.com/tenants/skyline.jpg",
      "plan": {
        "id": "plan_premium",
        "name": "Premium",
        "price": 199,
        "billing_cycle": "monthly",
        "features": ["5 shops", "15 users", "all features"],
        "start_date": "2023-03-15",
        "next_billing_date": "2025-04-15"
      },
      "shops": [
        {
          "id": "550e8400-e29b-41d4-a716-446655442222",
          "name": "Downtown Shop",
          "city": "Pune",
          "status": "active",
          "created_at": "2023-03-16T10:30:00Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655444444",
          "name": "Mall Branch",
          "city": "Pune",
          "status": "active",
          "created_at": "2023-04-10T09:15:00Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655447777",
          "name": "Highway Outlet",
          "city": "Pune",
          "status": "active",
          "created_at": "2024-01-20T11:45:00Z"
        }
      ],
      "users_count": 12,
      "billing_history": [
        {
          "id": "550e8400-e29b-41d4-a716-446655499999",
          "invoice_number": "INV-2025-03-0042",
          "amount": 199,
          "date": "2025-03-15T00:00:00Z",
          "status": "paid",
          "payment_method": "card"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655500000",
          "invoice_number": "INV-2025-02-0039",
          "amount": 199,
          "date": "2025-02-15T00:00:00Z",
          "status": "paid",
          "payment_method": "card"
        }
      ],
      "usage_stats": {
        "total_sales": 12458650,
        "total_transactions": 3750,
        "total_brands": 152,
        "api_calls_last_30_days": 28450
      },
      "status": "active",
      "created_at": "2023-03-15T09:30:00Z",
      "updated_at": "2025-03-15T10:00:00Z"
    },
    "timestamp": "2025-03-21T11:25:30Z"
  }
  ```

#### 91. Update Tenant
- **Endpoint**: `PATCH /api/admin/tenants/{tenant_id}`
- **Description**: Update tenant information (SaaS Admin only)
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "name": "Skyline Beverages & Spirits",
    "plan_id": "plan_enterprise",
    "status": "active"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655441111",
      "name": "Skyline Beverages & Spirits",
      "plan": {
        "id": "plan_enterprise",
        "name": "Enterprise",
        "features": ["Unlimited shops", "Unlimited users", "premium features"],
        "start_date": "2025-03-21",
        "next_billing_date": "2025-04-21"
      },
      "status": "active"
    },
    "message": "Tenant updated successfully",
    "timestamp": "2025-03-21T11:30:30Z"
  }
  ```

#### 92. Deactivate Tenant
- **Endpoint**: `POST /api/admin/tenants/{tenant_id}/deactivate`
- **Description**: Deactivate a tenant (SaaS Admin only)
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "reason": "Payment issues",
    "comments": "Multiple failed payment attempts"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655441111",
      "status": "inactive",
      "deactivation_reason": "Payment issues",
      "deactivation_comments": "Multiple failed payment attempts",
      "deactivated_at": "2025-03-21T11:35:30Z"
    },
    "message": "Tenant deactivated successfully",
    "timestamp": "2025-03-21T11:35:30Z"
  }
  ```

#### 93. Billing Plans
- **Endpoint**: `GET /api/admin/billing/plans`
- **Description**: Get all billing plans (SaaS Admin only)
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "plans": [
        {
          "id": "plan_basic",
          "name": "Basic",
          "description": "Starter plan for small businesses",
          "price": 99,
          "billing_cycle": "monthly",
          "features": ["1 shop", "5 users", "basic features"],
          "limits": {
            "shops": 1,
            "users": 5,
            "api_calls_per_day": 1000
          },
          "is_active": true,
          "created_at": "2023-01-01T00:00:00Z"
        },
        {
          "id": "plan_standard",
          "name": "Standard",
          "description": "Popular plan for growing businesses",
          "price": 149,
          "billing_cycle": "monthly",
          "features": ["3 shops", "10 users", "standard features"],
          "limits": {
            "shops": 3,
            "users": 10,
            "api_calls_per_day": 5000
          },
          "is_active": true,
          "created_at": "2023-01-01T00:00:00Z"
        },
        {
          "id": "plan_premium",
          "name": "Premium",
          "description": "Advanced plan for established businesses",
          "price": 199,
          "billing_cycle": "monthly",
          "features": ["5 shops", "15 users", "all features"],
          "limits": {
            "shops": 5,
            "users": 15,
            "api_calls_per_day": 10000
          },
          "is_active": true,
          "created_at": "2023-01-01T00:00:00Z"
        },
        {
          "id": "plan_enterprise",
          "name": "Enterprise",
          "description": "Unlimited plan for large businesses",
          "price": 299,
          "billing_cycle": "monthly",
          "features": ["Unlimited shops", "Unlimited users", "premium features"],
          "limits": {
            "shops": -1,
            "users": -1,
            "api_calls_per_day": 50000
          },
          "is_active": true,
          "created_at": "2023-01-01T00:00:00Z"
        }
      ]
    },
    "timestamp": "2025-03-21T11:40:30Z"
  }
  ```

#### 94. Create Billing Plan
- **Endpoint**: `POST /api/admin/billing/plans`
- **Description**: Create a new billing plan (SaaS Admin only)
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "name": "Professional",
    "description": "Comprehensive plan for medium businesses",
    "price": 249,
    "billing_cycle": "monthly",
    "features": ["8 shops", "25 users", "all features + priority support"],
    "limits": {
      "shops": 8,
      "users": 25,
      "api_calls_per_day": 25000
    },
    "is_active": true
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "plan_professional",
      "name": "Professional",
      "description": "Comprehensive plan for medium businesses",
      "price": 249,
      "billing_cycle": "monthly",
      "features": ["8 shops", "25 users", "all features + priority support"],
      "limits": {
        "shops": 8,
        "users": 25,
        "api_calls_per_day": 25000
      },
      "is_active": true,
      "created_at": "2025-03-21T11:45:30Z"
    },
    "message": "Billing plan created successfully",
    "timestamp": "2025-03-21T11:45:30Z"
  }
  ```

#### 95. Update Billing Plan
- **Endpoint**: `PATCH /api/admin/billing/plans/{plan_id}`
- **Description**: Update a billing plan (SaaS Admin only)
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "price": 269,
    "features": ["8 shops", "30 users", "all features + priority support + data backup"],
    "limits": {
      "users": 30,
      "api_calls_per_day": 30000
    }
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "plan_professional",
      "price": 269,
      "features": ["8 shops", "30 users", "all features + priority support + data backup"],
      "limits": {
        "shops": 8,
        "users": 30,
        "api_calls_per_day": 30000
      }
    },
    "message": "Billing plan updated successfully",
    "timestamp": "2025-03-21T11:50:30Z"
  }
  ```

#### 96. System Health
- **Endpoint**: `GET /api/admin/system/health`
- **Description**: Get system health status (SaaS Admin only)
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "status": "healthy",
      "timestamp": "2025-03-21T11:55:30Z",
      "uptime": 25.4,
      "services": [
        {
          "name": "API Gateway",
          "status": "healthy",
          "response_time": 42
        },
        {
          "name": "Auth Service",
          "status": "healthy",
          "response_time": 56
        },
        {
          "name": "Core Business Service",
          "status": "healthy",
          "response_time": 68
        },
        {
          "name": "Inventory Service",
          "status": "healthy",
          "response_time": 73
        },
        {
          "name": "Financial Service",
          "status": "healthy",
          "response_time": 85
        }
      ],
      "databases": [
        {
          "name": "PostgreSQL Primary",
          "status": "healthy",
          "connections": 125,
          "response_time": 15
        },
        {
          "name": "PostgreSQL Replica",
          "status": "healthy",
          "connections": 78,
          "response_time": 18
        }
      ],
      "message_broker": {
        "name": "Kafka",
        "status": "healthy",
        "topics": 12,
        "pending_messages": 42
      },
      "cache": {
        "name": "Redis",
        "status": "healthy",
        "memory_usage": "65%",
        "hit_rate": "92.5%"
      },
      "resource_usage": {
        "cpu": "32%",
        "memory": "45%",
        "disk": "38%",
        "network": {
          "in": "1.2 MB/s",
          "out": "2.4 MB/s"
        }
      }
    },
    "timestamp": "2025-03-21T11:55:30Z"
  }
  ```

#### 97. Error Logs
- **Endpoint**: `GET /api/admin/system/error-logs`
- **Description**: Get system error logs (SaaS Admin only)
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `level`: Filter by log level (error/warning/info)
  - `start_date`: Filter by start date (default: 24 hours ago)
  - `end_date`: Filter by end date (default: now)
  - `service`: Filter by service
  - `page`: Page number (default: 1)
  - `limit`: Items per page (default: 50)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "logs": [
        {
          "id": "log_78901",
          "timestamp": "2025-03-21T11:42:15Z",
          "level": "error",
          "service": "Inventory Service",
          "message": "Failed to process stock adjustment: Database connection timeout",
          "details": "Error occurred in ProcessStockAdjustment method. Transaction ID: TX-12345",
          "tenant_id": "550e8400-e29b-41d4-a716-446655441111",
          "user_id": "550e8400-e29b-41d4-a716-446655443333",
          "request_id": "req-abcde-12345",
          "stack_trace": "at InventoryService.ProcessStockAdjustment() ...",
          "resolved": false
        },
        {
          "id": "log_78900",
          "timestamp": "2025-03-21T11:30:20Z",
          "level": "warning",
          "service": "API Gateway",
          "message": "Rate limit exceeded for tenant",
          "details": "Tenant has exceeded the API rate limit of 10000 requests per day",
          "tenant_id": "550e8400-e29b-41d4-a716-446655495555",
          "request_id": "req-fghij-67890",
          "resolved": true
        }
      ],
      "summary": {
        "error_count": 12,
        "warning_count": 35,
        "info_count": 156,
        "unresolved_count": 8
      },
      "pagination": {
        "total": 203,
        "page": 1,
        "limit": 50,
        "pages": 5
      }
    },
    "timestamp": "2025-03-21T12:00:30Z"
  }
  ```

#### 98. System Configuration
- **Endpoint**: `GET /api/admin/system/config`
- **Description**: Get system configuration (SaaS Admin only)
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "general": {
        "system_name": "Liquor Shop Management System",
        "environment": "production",
        "support_email": "support@liquorshop.com",
        "contact_phone": "+911234567890",
        "time_zone": "Asia/Kolkata",
        "date_format": "YYYY-MM-DD",
        "maintenance_mode": false
      },
      "security": {
        "login_attempts_before_lockout": 5,
        "lockout_duration_minutes": 30,
        "password_expiry_days": 90,
        "password_history_count": 5,
        "session_timeout_minutes": 60,
        "jwt_expiry_hours": 1,
        "two_factor_auth_enabled": true
      },
      "email": {
        "sender_name": "Liquor Shop Management",
        "sender_email": "noreply@liquorshop.com",
        "smtp_host": "smtp.example.com",
        "smtp_port": 587,
        "smtp_use_tls": true
      },
      "notifications": {
        "email_notifications_enabled": true,
        "sms_notifications_enabled": true,
        "in_app_notifications_enabled": true
      },
      "storage": {
        "provider": "aws",
        "region": "ap-south-1",
        "bucket": "liquorshop-storage"
      },
      "logging": {
        "log_level": "info",
        "log_retention_days": 90,
        "audit_log_enabled": true
      },
      "rate_limits": {
        "default_rate_limit_per_minute": 60,
        "default_rate_limit_per_day": 5000,
        "whitelist_ips": [
          "10.0.0.1",
          "10.0.0.2"
        ]
      }
    },
    "timestamp": "2025-03-21T12:05:30Z"
  }
  ```

#### 99. Update System Configuration
- **Endpoint**: `PATCH /api/admin/system/config`
- **Description**: Update system configuration (SaaS Admin only)
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "general": {
      "support_email": "help@liquorshop.com",
      "contact_phone": "+911234567891"
    },
    "security": {
      "session_timeout_minutes": 45,
      "password_expiry_days": 60
    },
    "notifications": {
      "sms_notifications_enabled": false
    }
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "general": {
        "support_email": "help@liquorshop.com",
        "contact_phone": "+911234567891"
      },
      "security": {
        "session_timeout_minutes": 45,
        "password_expiry_days": 60
      },
      "notifications": {
        "sms_notifications_enabled": false
      }
    },
    "message": "System configuration updated successfully",
    "timestamp": "2025-03-21T12:10:30Z"
  }
  ```

### Mobile App APIs

#### 100. Mobile App Login
- **Endpoint**: `POST /api/mobile/login`
- **Description**: Mobile app-specific login with device information
- **Request Body**:
  ```json
  {
    "email": "user@example.com",
    "password": "securePassword123",
    "device_info": {
      "device_id": "A1B2C3D4-E5F6-G7H8-I9J0-K1L2M3N4O5P6",
      "device_type": "iOS",
      "device_model": "iPhone 14 Pro",
      "os_version": "16.5",
      "app_version": "1.2.3"
    },
    "fcm_token": "fcm-token-for-push-notifications"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
      "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
      "user": {
        "id": "550e8400-e29b-41d4-a716-446655448888",
        "email": "executive@example.com",
        "full_name": "Rahul Kumar Singh",
        "role": "executive",
        "profile_image_url": "https://storage.example.com/profiles/rahul.jpg",
        "assigned_shops": [
          {
            "id": "550e8400-e29b-41d4-a716-446655442222",
            "name": "Downtown Shop"
          },
          {
            "id": "550e8400-e29b-41d4-a716-446655444444",
            "name": "Mall Branch"
          }
        ],
        "primary_shop": {
          "id": "550e8400-e29b-41d4-a716-446655442222",
          "name": "Downtown Shop"
        },
        "tenant": {
          "id": "550e8400-e29b-41d4-a716-446655441111",
          "name": "Skyline Beverages"
        }
      },
      "config": {
        "max_offline_time": 24,
        "sync_interval": 30,
        "features": {
          "barcode_scanning": true,
          "offline_sales": true,
          "receipt_printing": true
        }
      },
      "expires_in": 3600
    },
    "timestamp": "2025-03-21T12:15:30Z"
  }
  ```

#### 101. Mobile Dashboard
- **Endpoint**: `GET /api/mobile/dashboard`
- **Description**: Get mobile app dashboard data
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `shop_id`: Shop ID (required)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "date": "2025-03-21",
      "daily_login": {
        "id": "550e8400-e29b-41d4-a716-446655478888",
        "login_time": "09:00",
        "opening_cash": 2000,
        "status": "active"
      },
      "sales_summary": {
        "today_sales": 28500,
        "today_target": 38000,
        "achievement_percentage": 75,
        "total_transactions": 14
      },
      "inventory_summary": {
        "total_products": 152,
        "low_stock_items": 5,
        "expiring_soon": 3
      },
      "cash_summary": {
        "opening_balance": 2000,
        "cash_sales": 18500,
        "upi_sales": 10000,
        "expenses": 500,
        "deposits": 0,
        "expected_cash": 20000
      },
      "pending_approvals": {
        "sales": 2,
        "stock_adjustments": 1,
        "returns": 0
      },
      "recent_activities": [
        {
          "type": "sale",
          "id": "550e8400-e29b-41d4-a716-446655501111",
          "amount": 4250,
          "timestamp": "2025-03-21T12:05:00Z",
          "status": "pending"
        },
        {
          "type": "stock_adjustment",
          "id": "550e8400-e29b-41d4-a716-446655502222",
          "timestamp": "2025-03-21T11:30:00Z",
          "status": "pending"
        }
      ]
    },
    "timestamp": "2025-03-21T12:20:30Z"
  }
  ```

#### 102. Mobile Offline Queue
- **Endpoint**: `GET /api/mobile/offline-queue`
- **Description**: Get pending offline transactions
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `shop_id`: Shop ID (required)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "pending_count": 3,
      "last_sync": "2025-03-21T12:00:30Z",
      "transactions": [
        {
          "id": "local-123456",
          "type": "sale",
          "data": {
            "shop_id": "550e8400-e29b-41d4-a716-446655442222",
            "items": [
              {
                "brand_id": "550e8400-e29b-41d4-a716-446655454444",
                "quantity": 2,
                "price_type": "regular",
                "price": 670
              }
            ],
            "payment_method": "cash"
          },
          "created_at": "2025-03-21T11:45:30Z",
          "status": "pending_sync"
        },
        {
          "id": "local-123457",
          "type": "stock_adjustment",
          "data": {
            "shop_id": "550e8400-e29b-41d4-a716-446655442222",
            "items": [
              {
                "brand_id": "550e8400-e29b-41d4-a716-446655454444",
                "previous_quantity": 18,
                "new_quantity": 16,
                "reason": "breakage"
              }
            ]
          },
          "created_at": "2025-03-21T11:50:30Z",
          "status": "pending_sync"
        },
        {
          "id": "local-123458",
          "type": "expense",
          "data": {
            "shop_id": "550e8400-e29b-41d4-a716-446655442222",
            "amount": 200,
            "category": "utilities",
            "description": "Water bill payment"
          },
          "created_at": "2025-03-21T11:55:30Z",
          "status": "pending_sync"
        }
      ]
    },
    "timestamp": "2025-03-21T12:25:30Z"
  }
  ```

#### 103. Mobile Sync
- **Endpoint**: `POST /api/mobile/sync`
- **Description**: Synchronize offline data with server
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "shop_id": "550e8400-e29b-41d4-a716-446655442222",
    "device_id": "A1B2C3D4-E5F6-G7H8-I9J0-K1L2M3N4O5P6",
    "transactions": [
      {
        "id": "local-123456",
        "type": "sale",
        "data": {
          "shop_id": "550e8400-e29b-41d4-a716-446655442222",
          "items": [
            {
              "brand_id": "550e8400-e29b-41d4-a716-446655454444",
              "quantity": 2,
              "price_type": "regular",
              "price": 670
            }
          ],
          "payment_method": "cash"
        },
        "created_at": "2025-03-21T11:45:30Z"
      },
      {
        "id": "local-123457",
        "type": "stock_adjustment",
        "data": {
          "shop_id": "550e8400-e29b-41d4-a716-446655442222",
          "items": [
            {
              "brand_id": "550e8400-e29b-41d4-a716-446655454444",
              "previous_quantity": 18,
              "new_quantity": 16,
              "reason": "breakage"
            }
          ]
        },
        "created_at": "2025-03-21T11:50:30Z"
      },
      {
        "id": "local-123458",
        "type": "expense",
        "data": {
          "shop_id": "550e8400-e29b-41d4-a716-446655442222",
          "amount": 200,
          "category": "utilities",
          "description": "Water bill payment"
        },
        "created_at": "2025-03-21T11:55:30Z"
      }
    ]
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "sync_id": "sync-20250321-123456",
      "sync_time": "2025-03-21T12:30:30Z",
      "processed": 3,
      "succeeded": 3,
      "failed": 0,
      "results": [
        {
          "local_id": "local-123456",
          "server_id": "550e8400-e29b-41d4-a716-446655503333",
          "type": "sale",
          "status": "success"
        },
        {
          "local_id": "local-123457",
          "server_id": "550e8400-e29b-41d4-a716-446655504444",
          "type": "stock_adjustment",
          "status": "success"
        },
        {
          "local_id": "local-123458",
          "server_id": "550e8400-e29b-41d4-a716-446655505555",
          "type": "expense",
          "status": "success"
        }
      ],
      "updates_to_pull": 15
    },
    "message": "Sync completed successfully",
    "timestamp": "2025-03-21T12:30:30Z"
  }
  ```

#### 104. Mobile Pull Updates
- **Endpoint**: `GET /api/mobile/updates`
- **Description**: Get updates for mobile app
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `shop_id`: Shop ID (required)
  - `last_sync`: Last sync timestamp (required)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "updates": {
        "brands": [
          {
            "id": "550e8400-e29b-41d4-a716-446655454444",
            "name": "Royal Stag Premium",
            "category": "whisky",
            "size": "750ml",
            "regular_price": 670,
            "discount_price": 640,
            "status": "active",
            "updated_at": "2025-03-21T10:20:30Z"
          }
        ],
        "stock": [
          {
            "brand_id": "550e8400-e29b-41d4-a716-446655454444",
            "shop_id": "550e8400-e29b-41d4-a716-446655442222",
            "quantity": 16,
            "updated_at": "2025-03-21T11:50:30Z"
          }
        ],
        "sales": [
          {
            "id": "550e8400-e29b-41d4-a716-446655503333",
            "invoice_number": "INV-20250321-0043",
            "shop_id": "550e8400-e29b-41d4-a716-446655442222",
            "grand_total": 1340,
            "status": "pending",
            "created_at": "2025-03-21T11:45:30Z"
          }
        ],
        "config": {
          "max_offline_time": 24,
          "sync_interval": 30,
          "updated_at": "2025-03-21T09:00:00Z"
        }
      },
      "timestamp": "2025-03-21T12:35:30Z"
    },
    "timestamp": "2025-03-21T12:35:30Z"
  }
  ```



## Additional API Specifications

### Notification Management APIs

#### 105. List Notifications
- **Endpoint**: `GET /api/notifications`
- **Description**: Get user notifications
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `page`: Page number (default: 1)
  - `limit`: Items per page (default: 20)
  - `read`: Filter by read status (true/false)
  - `type`: Filter by notification type
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "notifications": [
        {
          "id": "550e8400-e29b-41d4-a716-446655506666",
          "type": "sale_approval",
          "title": "New Sale Requires Approval",
          "message": "Sale #INV-20250321-0043 requires your approval",
          "data": {
            "sale_id": "550e8400-e29b-41d4-a716-446655503333",
            "invoice_number": "INV-20250321-0043",
            "amount": 1340
          },
          "read": false,
          "created_at": "2025-03-21T11:45:30Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655507777",
          "type": "low_stock",
          "title": "Low Stock Alert",
          "message": "5 products have reached low stock level in Downtown Shop",
          "data": {
            "shop_id": "550e8400-e29b-41d4-a716-446655442222",
            "shop_name": "Downtown Shop",
            "low_stock_count": 5
          },
          "read": true,
          "created_at": "2025-03-21T08:30:00Z"
        }
      ],
      "unread_count": 1,
      "pagination": {
        "total": 35,
        "page": 1,
        "limit": 20,
        "pages": 2
      }
    },
    "timestamp": "2025-03-21T12:40:30Z"
  }
  ```

#### 106. Mark Notification as Read
- **Endpoint**: `POST /api/notifications/{notification_id}/read`
- **Description**: Mark a notification as read
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655506666",
      "read": true,
      "read_at": "2025-03-21T12:45:30Z"
    },
    "message": "Notification marked as read",
    "timestamp": "2025-03-21T12:45:30Z"
  }
  ```

#### 107. Mark All Notifications as Read
- **Endpoint**: `POST /api/notifications/read-all`
- **Description**: Mark all notifications as read
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "marked_count": 12
    },
    "message": "All notifications marked as read",
    "timestamp": "2025-03-21T12:50:30Z"
  }
  ```

#### 108. Notification Settings
- **Endpoint**: `GET /api/notifications/settings`
- **Description**: Get user notification settings
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "email_notifications": true,
      "push_notifications": true,
      "sms_notifications": false,
      "channels": {
        "sale_approval": ["email", "push"],
        "stock_adjustment": ["email", "push"],
        "low_stock": ["email", "push"],
        "expiry_alert": ["email", "push"],
        "system_updates": ["email"]
      }
    },
    "timestamp": "2025-03-21T12:55:30Z"
  }
  ```

#### 109. Update Notification Settings
- **Endpoint**: `PATCH /api/notifications/settings`
- **Description**: Update user notification settings
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "email_notifications": true,
    "push_notifications": true,
    "sms_notifications": true,
    "channels": {
      "low_stock": ["email", "push", "sms"],
      "expiry_alert": ["email", "push", "sms"]
    }
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "email_notifications": true,
      "push_notifications": true,
      "sms_notifications": true,
      "channels": {
        "low_stock": ["email", "push", "sms"],
        "expiry_alert": ["email", "push", "sms"]
      }
    },
    "message": "Notification settings updated successfully",
    "timestamp": "2025-03-21T13:00:30Z"
  }
  ```

### Audit Log APIs

#### 110. List Audit Logs
- **Endpoint**: `GET /api/audit-logs`
- **Description**: Get audit logs for tenant
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `page`: Page number (default: 1)
  - `limit`: Items per page (default: 20)
  - `start_date`: Filter by start date
  - `end_date`: Filter by end date
  - `user_id`: Filter by user
  - `shop_id`: Filter by shop
  - `action`: Filter by action type (create/update/delete)
  - `entity_type`: Filter by entity type (user/shop/brand/inventory/sale/etc)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "logs": [
        {
          "id": "550e8400-e29b-41d4-a716-446655508888",
          "user": {
            "id": "550e8400-e29b-41d4-a716-446655443333",
            "name": "Amit Kumar"
          },
          "action": "update",
          "entity_type": "brand",
          "entity_id": "550e8400-e29b-41d4-a716-446655454444",
          "entity_name": "Royal Stag Premium",
          "details": {
            "changes": {
              "regular_price": {
                "from": 650,
                "to": 670
              },
              "discount_price": {
                "from": 620,
                "to": 640
              }
            }
          },
          "ip_address": "192.168.1.100",
          "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36",
          "timestamp": "2025-03-21T10:20:30Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655509999",
          "user": {
            "id": "550e8400-e29b-41d4-a716-446655448888",
            "name": "Rahul Kumar Singh"
          },
          "action": "create",
          "entity_type": "sale",
          "entity_id": "550e8400-e29b-41d4-a716-446655503333",
          "entity_name": "INV-20250321-0043",
          "details": {
            "shop_id": "550e8400-e29b-41d4-a716-446655442222",
            "amount": 1340,
            "items_count": 1
          },
          "ip_address": "192.168.1.101",
          "user_agent": "LiquorShopApp/1.2.3 (iPhone; iOS 16.5)",
          "timestamp": "2025-03-21T11:45:30Z"
        }
      ],
      "pagination": {
        "total": 1852,
        "page": 1,
        "limit": 20,
        "pages": 93
      }
    },
    "timestamp": "2025-03-21T13:05:30Z"
  }
  ```

#### 111. Get Audit Log Details
- **Endpoint**: `GET /api/audit-logs/{log_id}`
- **Description**: Get detailed information for a specific audit log
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655508888",
      "user": {
        "id": "550e8400-e29b-41d4-a716-446655443333",
        "name": "Amit Kumar",
        "email": "amit.k@example.com",
        "role": "manager"
      },
      "action": "update",
      "entity_type": "brand",
      "entity_id": "550e8400-e29b-41d4-a716-446655454444",
      "entity_name": "Royal Stag Premium",
      "details": {
        "changes": {
          "regular_price": {
            "from": 650,
            "to": 670
          },
          "discount_price": {
            "from": 620,
            "to": 640
          }
        },
        "reason": "Price update as per supplier notification"
      },
      "ip_address": "192.168.1.100",
      "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36",
      "request_id": "req-12345-abcde",
      "timestamp": "2025-03-21T10:20:30Z"
    },
    "timestamp": "2025-03-21T13:10:30Z"
  }
  ```

### Email Template Management

#### 112. List Email Templates
- **Endpoint**: `GET /api/email-templates`
- **Description**: Get all email templates
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "templates": [
        {
          "id": "550e8400-e29b-41d4-a716-446655510000",
          "name": "welcome_email",
          "display_name": "User Welcome Email",
          "subject": "Welcome to {{tenant_name}}",
          "description": "Sent to new users when their account is created",
          "last_updated_at": "2024-01-15T10:00:00Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655511111",
          "name": "password_reset",
          "display_name": "Password Reset Email",
          "subject": "Reset Your Password",
          "description": "Sent when a user requests a password reset",
          "last_updated_at": "2024-01-15T10:05:00Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655512222",
          "name": "sale_approval",
          "display_name": "Sale Approval Notification",
          "subject": "New Sale Requires Your Approval",
          "description": "Sent to managers when a new sale needs approval",
          "last_updated_at": "2024-01-15T10:10:00Z"
        }
      ]
    },
    "timestamp": "2025-03-21T13:15:30Z"
  }
  ```

#### 113. Get Email Template
- **Endpoint**: `GET /api/email-templates/{template_id}`
- **Description**: Get detailed information for a specific email template
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655510000",
      "name": "welcome_email",
      "display_name": "User Welcome Email",
      "subject": "Welcome to {{tenant_name}}",
      "body_html": "<html><head><style>body { font-family: Arial, sans-serif; }</style></head><body><h1>Welcome to {{tenant_name}}</h1><p>Dear {{user_name}},</p><p>Your account has been created successfully. Your temporary password is: <strong>{{temp_password}}</strong></p><p>Please login and change your password.</p><p>Regards,<br>The Team</p></body></html>",
      "body_text": "Welcome to {{tenant_name}}\n\nDear {{user_name}},\n\nYour account has been created successfully. Your temporary password is: {{temp_password}}\n\nPlease login and change your password.\n\nRegards,\nThe Team",
      "variables": [
        "tenant_name",
        "user_name",
        "temp_password"
      ],
      "description": "Sent to new users when their account is created",
      "is_system": true,
      "created_at": "2023-01-01T00:00:00Z",
      "last_updated_at": "2024-01-15T10:00:00Z"
    },
    "timestamp": "2025-03-21T13:20:30Z"
  }
  ```

#### 114. Update Email Template
- **Endpoint**: `PATCH /api/email-templates/{template_id}`
- **Description**: Update an email template
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "subject": "Welcome to {{tenant_name}} - Get Started Today",
    "body_html": "<html><head><style>body { font-family: Arial, sans-serif; color: #333; }</style></head><body><h1>Welcome to {{tenant_name}}</h1><p>Dear {{user_name}},</p><p>Your account has been created successfully. Your temporary password is: <strong>{{temp_password}}</strong></p><p>Please login and change your password within 24 hours.</p><p>If you have any questions, feel free to contact our support team.</p><p>Regards,<br>The {{tenant_name}} Team</p></body></html>",
    "body_text": "Welcome to {{tenant_name}} - Get Started Today\n\nDear {{user_name}},\n\nYour account has been created successfully. Your temporary password is: {{temp_password}}\n\nPlease login and change your password within 24 hours.\n\nIf you have any questions, feel free to contact our support team.\n\nRegards,\nThe {{tenant_name}} Team"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655510000",
      "subject": "Welcome to {{tenant_name}} - Get Started Today",
      "body_html": "<html><head><style>body { font-family: Arial, sans-serif; color: #333; }</style></head><body><h1>Welcome to {{tenant_name}}</h1><p>Dear {{user_name}},</p><p>Your account has been created successfully. Your temporary password is: <strong>{{temp_password}}</strong></p><p>Please login and change your password within 24 hours.</p><p>If you have any questions, feel free to contact our support team.</p><p>Regards,<br>The {{tenant_name}} Team</p></body></html>",
      "body_text": "Welcome to {{tenant_name}} - Get Started Today\n\nDear {{user_name}},\n\nYour account has been created successfully. Your temporary password is: {{temp_password}}\n\nPlease login and change your password within 24 hours.\n\nIf you have any questions, feel free to contact our support team.\n\nRegards,\nThe {{tenant_name}} Team",
      "last_updated_at": "2025-03-21T13:25:30Z"
    },
    "message": "Email template updated successfully",
    "timestamp": "2025-03-21T13:25:30Z"
  }
  ```

#### 115. Test Email Template
- **Endpoint**: `POST /api/email-templates/{template_id}/test`
- **Description**: Send a test email using a template
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "recipient_email": "test@example.com",
    "recipient_name": "Test User",
    "template_variables": {
      "tenant_name": "Skyline Beverages",
      "user_name": "Test User",
      "temp_password": "TestPass123"
    }
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "message": "Test email sent successfully to test@example.com",
    "timestamp": "2025-03-21T13:30:30Z"
  }
  ```

### Backup & Restore APIs

#### 116. List Backups
- **Endpoint**: `GET /api/backups`
- **Description**: Get all backups for the tenant
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "backups": [
        {
          "id": "550e8400-e29b-41d4-a716-446655513333",
          "name": "Scheduled Backup - 2025-03-21",
          "type": "scheduled",
          "size": 15728640,
          "status": "completed",
          "created_at": "2025-03-21T01:00:00Z",
          "completed_at": "2025-03-21T01:05:30Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655514444",
          "name": "Manual Backup - 2025-03-20",
          "type": "manual",
          "size": 15360000,
          "status": "completed",
          "created_by": {
            "id": "550e8400-e29b-41d4-a716-446655498888",
            "name": "John Doe"
          },
          "created_at": "2025-03-20T15:30:00Z",
          "completed_at": "2025-03-20T15:35:45Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655515555",
          "name": "Pre-Update Backup - 2025-03-19",
          "type": "system",
          "size": 15097344,
          "status": "completed",
          "created_at": "2025-03-19T22:00:00Z",
          "completed_at": "2025-03-19T22:04:30Z"
        }
      ]
    },
    "timestamp": "2025-03-21T13:35:30Z"
  }
  ```

#### 117. Create Backup
- **Endpoint**: `POST /api/backups`
- **Description**: Create a new manual backup
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "name": "Manual Backup - Before price update",
    "description": "Backup before bulk price changes",
    "include_files": true
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655516666",
      "name": "Manual Backup - Before price update",
      "description": "Backup before bulk price changes",
      "type": "manual",
      "include_files": true,
      "status": "in_progress",
      "estimated_completion_time": "2025-03-21T13:45:30Z",
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655498888",
        "name": "John Doe"
      },
      "created_at": "2025-03-21T13:40:30Z"
    },
    "message": "Backup initiated successfully",
    "timestamp": "2025-03-21T13:40:30Z"
  }
  ```

#### 118. Get Backup Details
- **Endpoint**: `GET /api/backups/{backup_id}`
- **Description**: Get detailed information for a specific backup
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655514444",
      "name": "Manual Backup - 2025-03-20",
      "description": "Routine backup before end of day",
      "type": "manual",
      "size": 15360000,
      "file_count": 342,
      "include_files": true,
      "status": "completed",
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655498888",
        "name": "John Doe"
      },
      "created_at": "2025-03-20T15:30:00Z",
      "started_at": "2025-03-20T15:30:15Z",
      "completed_at": "2025-03-20T15:35:45Z",
      "contents": {
        "database_tables": 35,
        "total_records": 156842,
        "file_size": 8524800
      },
      "download_available": true,
      "download_expires_at": "2025-03-27T15:35:45Z"
    },
    "timestamp": "2025-03-21T13:45:30Z"
  }
  ```

#### 119. Download Backup
- **Endpoint**: `GET /api/backups/{backup_id}/download`
- **Description**: Get download URL for a backup
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "download_url": "https://storage.example.com/backups/tenant_123456/backup_550e8400-e29b-41d4-a716-446655514444.zip?token=abc123...",
      "expires_at": "2025-03-21T14:45:30Z",
      "size": 15360000
    },
    "message": "Download URL generated successfully",
    "timestamp": "2025-03-21T13:50:30Z"
  }
  ```

#### 120. Restore Backup
- **Endpoint**: `POST /api/backups/{backup_id}/restore`
- **Description**: Restore data from a backup
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "confirmation": "I understand this will overwrite current data",
    "restore_options": {
      "include_users": false,
      "include_settings": false,
      "include_files": true
    }
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "restore_id": "550e8400-e29b-41d4-a716-446655517777",
      "backup_id": "550e8400-e29b-41d4-a716-446655514444",
      "status": "in_progress",
      "estimated_completion_time": "2025-03-21T14:10:30Z",
      "restore_options": {
        "include_users": false,
        "include_settings": false,
        "include_files": true
      },
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655498888",
        "name": "John Doe"
      },
      "created_at": "2025-03-21T13:55:30Z"
    },
    "message": "Restore process initiated successfully",
    "timestamp": "2025-03-21T13:55:30Z"
  }
  ```

#### 121. Get Restore Status
- **Endpoint**: `GET /api/restores/{restore_id}`
- **Description**: Get status of a restore operation
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655517777",
      "backup_id": "550e8400-e29b-41d4-a716-446655514444",
      "status": "completed",
      "progress": 100,
      "restore_options": {
        "include_users": false,
        "include_settings": false,
        "include_files": true
      },
      "created_by": {
        "id": "550e8400-e29b-41d4-a716-446655498888",
        "name": "John Doe"
      },
      "created_at": "2025-03-21T13:55:30Z",
      "started_at": "2025-03-21T13:55:45Z",
      "completed_at": "2025-03-21T14:05:30Z",
      "summary": {
        "tables_restored": 28,
        "records_restored": 120345,
        "files_restored": 342
      }
    },
    "timestamp": "2025-03-21T14:10:30Z"
  }
  ```

### Integration APIs

#### 122. List Webhooks
- **Endpoint**: `GET /api/integrations/webhooks`
- **Description**: Get all webhook configurations
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "webhooks": [
        {
          "id": "550e8400-e29b-41d4-a716-446655518888",
          "name": "Inventory Update Notification",
          "url": "https://example.com/webhook/inventory",
          "events": ["inventory.created", "inventory.updated"],
          "status": "active",
          "created_at": "2025-01-15T10:00:00Z",
          "last_triggered_at": "2025-03-21T10:20:30Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655519999",
          "name": "Sales Notification",
          "url": "https://example.com/webhook/sales",
          "events": ["sale.created", "sale.approved", "sale.rejected"],
          "status": "active",
          "created_at": "2025-01-15T10:05:00Z",
          "last_triggered_at": "2025-03-21T11:45:30Z"
        }
      ]
    },
    "timestamp": "2025-03-21T14:15:30Z"
  }
  ```

#### 123. Create Webhook
- **Endpoint**: `POST /api/integrations/webhooks`
- **Description**: Create a new webhook configuration
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "name": "Purchase Order Notification",
    "url": "https://example.com/webhook/purchase",
    "events": ["purchase.created", "purchase.approved", "purchase.received"],
    "secret": "secretkey123",
    "description": "Notify external system about purchase order events"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655520000",
      "name": "Purchase Order Notification",
      "url": "https://example.com/webhook/purchase",
      "events": ["purchase.created", "purchase.approved", "purchase.received"],
      "secret": "secretkey123",
      "description": "Notify external system about purchase order events",
      "status": "active",
      "created_at": "2025-03-21T14:20:30Z"
    },
    "message": "Webhook created successfully",
    "timestamp": "2025-03-21T14:20:30Z"
  }
  ```

#### 124. Update Webhook
- **Endpoint**: `PATCH /api/integrations/webhooks/{webhook_id}`
- **Description**: Update a webhook configuration
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "events": ["purchase.created", "purchase.approved", "purchase.received", "purchase.cancelled"],
    "status": "active"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655520000",
      "events": ["purchase.created", "purchase.approved", "purchase.received", "purchase.cancelled"],
      "status": "active"
    },
    "message": "Webhook updated successfully",
    "timestamp": "2025-03-21T14:25:30Z"
  }
  ```

#### 125. Delete Webhook
- **Endpoint**: `DELETE /api/integrations/webhooks/{webhook_id}`
- **Description**: Delete a webhook configuration
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "message": "Webhook deleted successfully",
    "timestamp": "2025-03-21T14:30:30Z"
  }
  ```

#### 126. Test Webhook
- **Endpoint**: `POST /api/integrations/webhooks/{webhook_id}/test`
- **Description**: Send a test event to a webhook
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "event": "purchase.created"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "request_id": "req-12345-abcde",
      "event": "purchase.created",
      "target_url": "https://example.com/webhook/purchase",
      "response_code": 200,
      "response_body": "{\"status\":\"success\",\"message\":\"Webhook received\"}",
      "response_time": 345
    },
    "message": "Webhook test successful",
    "timestamp": "2025-03-21T14:35:30Z"
  }
  ```

#### 127. List External Integrations
- **Endpoint**: `GET /api/integrations`
- **Description**: Get all configured external integrations
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "integrations": [
        {
          "id": "550e8400-e29b-41d4-a716-446655521111",
          "type": "payment_gateway",
          "name": "Razorpay",
          "status": "active",
          "configured_at": "2024-01-15T10:00:00Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655522222",
          "type": "accounting",
          "name": "Tally",
          "status": "active",
          "configured_at": "2024-01-15T10:05:00Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655523333",
          "type": "sms",
          "name": "Twilio",
          "status": "inactive",
          "configured_at": "2024-01-15T10:10:00Z"
        }
      ]
    },
    "timestamp": "2025-03-21T14:40:30Z"
  }
  ```

#### 128. Configure Integration
- **Endpoint**: `POST /api/integrations`
- **Description**: Configure a new external integration
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "type": "sms",
    "name": "Twilio",
    "config": {
      "account_sid": "AC1234567890abcdef1234567890abcdef",
      "auth_token": "auth_token_123456",
      "from_number": "+91987654321",
      "enabled": true
    }
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655523333",
      "type": "sms",
      "name": "Twilio",
      "status": "active",
      "configured_at": "2025-03-21T14:45:30Z"
    },
    "message": "Integration configured successfully",
    "timestamp": "2025-03-21T14:45:30Z"
  }
  ```

#### 129. Update Integration
- **Endpoint**: `PATCH /api/integrations/{integration_id}`
- **Description**: Update an external integration configuration
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "config": {
      "from_number": "+91987654322",
      "enabled": true
    }
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655523333",
      "type": "sms",
      "name": "Twilio",
      "status": "active",
      "updated_at": "2025-03-21T14:50:30Z"
    },
    "message": "Integration updated successfully",
    "timestamp": "2025-03-21T14:50:30Z"
  }
  ```

#### 130. Test Integration
- **Endpoint**: `POST /api/integrations/{integration_id}/test`
- **Description**: Test an external integration
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "test_data": {
      "phone": "+91987654323",
      "message": "This is a test message"
    }
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "status": "success",
      "response": {
        "message_id": "SM1234567890abcdef1234567890abcdef",
        "status": "queued"
      }
    },
    "message": "Integration test successful",
    "timestamp": "2025-03-21T14:55:30Z"
  }
  ```

### System Health and Monitoring APIs

#### 131. Get Service Status
- **Endpoint**: `GET /api/system/status`
- **Description**: Get status of all system services (accessible to tenant admins)
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "status": "healthy",
      "timestamp": "2025-03-21T15:00:30Z",
      "services": [
        {
          "name": "API Service",
          "status": "healthy",
          "last_checked": "2025-03-21T15:00:15Z"
        },
        {
          "name": "Database",
          "status": "healthy",
          "last_checked": "2025-03-21T15:00:15Z"
        },
        {
          "name": "Storage",
          "status": "healthy",
          "last_checked": "2025-03-21T15:00:15Z"
        },
        {
          "name": "Email Service",
          "status": "healthy",
          "last_checked": "2025-03-21T15:00:15Z"
        },
        {
          "name": "SMS Service",
          "status": "degraded",
          "issue": "Increased latency",
          "last_checked": "2025-03-21T15:00:15Z"
        }
      ],
      "upcoming_maintenance": [
        {
          "id": "maint-123456",
          "title": "System Upgrade",
          "description": "Upgrading to the latest version with new features",
          "start_time": "2025-03-22T02:00:00Z",
          "end_time": "2025-03-22T04:00:00Z",
          "impact": "System will be unavailable during this period"
        }
      ]
    },
    "timestamp": "2025-03-21T15:00:30Z"
  }
  ```

#### 132. Get Tenant Usage Stats
- **Endpoint**: `GET /api/system/usage-stats`
- **Description**: Get usage statistics for the tenant
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `start_date`: Start date (default: 30 days ago)
  - `end_date`: End date (default: today)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "period": {
        "start_date": "2025-02-20",
        "end_date": "2025-03-21"
      },
      "api_usage": {
        "total_requests": 124560,
        "daily_average": 4152,
        "peak_day": "2025-03-15",
        "peak_day_requests": 6254,
        "by_endpoint": [
          {
            "endpoint": "/api/sales",
            "requests": 28450,
            "percentage": 22.84
          },
          {
            "endpoint": "/api/inventory/stock",
            "requests": 18750,
            "percentage": 15.05
          }
        ]
      },
      "storage_usage": {
        "total_bytes": 1073741824,
        "files_count": 2450,
        "by_type": [
          {
            "type": "images",
            "bytes": 536870912,
            "percentage": 50
          },
          {
            "type": "documents",
            "bytes": 268435456,
            "percentage": 25
          },
          {
            "type": "backups",
            "bytes": 268435456,
            "percentage": 25
          }
        ]
      },
      "database_usage": {
        "total_records": 1250000,
        "total_bytes": 2147483648,
        "by_entity": [
          {
            "entity": "sales",
            "records": 450000,
            "percentage": 36
          },
          {
            "entity": "inventory_transactions",
            "records": 350000,
            "percentage": 28
          }
        ]
      },
      "limits": {
        "api_requests_per_day": 10000,
        "storage_bytes": 5368709120,
        "database_records": 10000000
      }
    },
    "timestamp": "2025-03-21T15:05:30Z"
  }
  ```


## API Best Practices and Standards

1. **Authentication & Security**
   - All API endpoints are secured using JWT authentication
   - Role-based access control enforced for all endpoints
   - Sensitive data encrypted in transit and at rest
   - Rate limiting to prevent abuse

2. **Response Format**
   - Consistent response format across all endpoints
   - Always include success flag, data object, message, and timestamp
   - Error responses provide detailed information for debugging

3. **Pagination, Filtering & Sorting**
   - List endpoints support pagination with page and limit parameters
   - Filtering supported via query parameters
   - Sorting supported via ordering parameter
   - Consistent pagination object in responses

4. **Versioning**
   - API versioning via URL path (/api/v1/, /api/v2/)
   - Backward compatibility maintained for at least one previous version
   - Deprecation notices provided before removing endpoints

5. **Error Handling**
   - Standard HTTP status codes used appropriately
   - Detailed error messages for client-side errors
   - Error logging for server-side errors
   - Unique error codes for specific error conditions

6. **Performance**
   - Responses optimized for minimal payload size
   - Caching headers used where appropriate
   - Batch operations supported for bulk actions
   - Asynchronous processing for long-running operations

7. **Documentation**
   - OpenAPI/Swagger specifications available
   - Interactive API documentation
   - Code examples for common operations
   - Authentication guide for developers

## Scaling and Performance Considerations

1. **Horizontal Scaling**
   - Stateless API design for easy scaling
   - Kubernetes auto-scaling based on load
   - Load balancing across service instances

2. **Caching Strategy**
   - Redis used for caching frequently accessed data
   - Cache invalidation on data changes
   - Tiered caching strategy (application, database, CDN)

3. **Database Optimization**
   - Read replicas for scaling read operations
   - Connection pooling for efficiency
   - Query optimization and indexing
   - Database sharding for large tenants

4. **Message Queue**
   - Kafka used for asynchronous processing
   - Event-driven architecture for decoupling services
   - Reliable message delivery with at-least-once semantics

5. **Monitoring & Alerts**
   - Real-time performance monitoring
   - Automated alerts for performance degradation
   - Detailed logging for troubleshooting
   - Regular performance testing and optimization

## Specialized API Specifications

### Barcode Management APIs

#### 151. Generate Barcode
- **Endpoint**: `POST /api/barcodes/generate`
- **Description**: Generate a barcode or QR code for a product
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "brand_id": "550e8400-e29b-41d4-a716-446655454444",
    "type": "qr",
    "include_data": {
      "price": true,
      "expiry": false,
      "batch": true
    },
    "size": "medium",
    "format": "png"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655535555",
      "brand": {
        "id": "550e8400-e29b-41d4-a716-446655454444",
        "name": "Royal Stag Premium"
      },
      "barcode_type": "qr",
      "barcode_data": "LSTG-2025-454444-675",
      "image_url": "https://storage.example.com/barcodes/LSTG-2025-454444-675.png",
      "download_url": "https://storage.example.com/barcodes/download/LSTG-2025-454444-675.png",
      "created_at": "2025-03-21T16:45:30Z"
    },
    "message": "Barcode generated successfully",
    "timestamp": "2025-03-21T16:45:30Z"
  }
  ```

#### 152. Batch Generate Barcodes
- **Endpoint**: `POST /api/barcodes/batch-generate`
- **Description**: Generate barcodes for multiple products
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "brand_ids": [
      "550e8400-e29b-41d4-a716-446655454444",
      "550e8400-e29b-41d4-a716-446655455555",
      "550e8400-e29b-41d4-a716-446655461111"
    ],
    "type": "qr",
    "include_data": {
      "price": true,
      "expiry": false,
      "batch": true
    },
    "size": "medium",
    "format": "png"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "batch_id": "550e8400-e29b-41d4-a716-446655536666",
      "total": 3,
      "status": "processing",
      "barcodes": [],
      "estimated_completion_time": "2025-03-21T16:50:30Z"
    },
    "message": "Barcode batch generation started",
    "timestamp": "2025-03-21T16:45:30Z"
  }
  ```

#### 153. Validate Barcode
- **Endpoint**: `POST /api/barcodes/validate`
- **Description**: Validate a scanned barcode
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "barcode_data": "LSTG-2025-454444-675",
    "shop_id": "550e8400-e29b-41d4-a716-446655442222"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "is_valid": true,
      "brand": {
        "id": "550e8400-e29b-41d4-a716-446655454444",
        "name": "Royal Stag Premium",
        "category": "whisky",
        "size": "750ml"
      },
      "shop_stock": {
        "quantity": 60,
        "regular_price": 675,
        "discount_price": 645
      },
      "generated_at": "2025-03-21T16:45:30Z"
    },
    "timestamp": "2025-03-21T16:55:30Z"
  }
  ```

### Customer Management APIs

#### 154. List Customers
- **Endpoint**: `GET /api/customers`
- **Description**: Get a list of customers
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `page`: Page number (default: 1)
  - `limit`: Items per page (default: 20)
  - `search`: Search by name or phone
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "customers": [
        {
          "id": "550e8400-e29b-41d4-a716-446655537777",
          "name": "Rajesh Sharma",
          "phone": "+919876543210",
          "email": "rajesh@example.com",
          "total_purchases": 24,
          "total_amount": 45680,
          "loyalty_points": 456,
          "last_purchase_date": "2025-03-15T14:30:00Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655538888",
          "name": "Priya Patel",
          "phone": "+919876543211",
          "email": "priya@example.com",
          "total_purchases": 18,
          "total_amount": 32450,
          "loyalty_points": 324,
          "last_purchase_date": "2025-03-18T16:45:00Z"
        }
      ],
      "pagination": {
        "total": 124,
        "page": 1,
        "limit": 20,
        "pages": 7
      }
    },
    "timestamp": "2025-03-21T17:00:30Z"
  }
  ```

#### 155. Create Customer
- **Endpoint**: `POST /api/customers`
- **Description**: Create a new customer
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "name": "Anil Kumar",
    "phone": "+919876543212",
    "email": "anil@example.com",
    "address": "123 Main St, Mumbai",
    "date_of_birth": "1985-05-15",
    "preferences": {
      "favorite_categories": ["whisky", "wine"],
      "preferred_contact_method": "sms"
    }
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655539999",
      "name": "Anil Kumar",
      "phone": "+919876543212",
      "email": "anil@example.com",
      "address": "123 Main St, Mumbai",
      "date_of_birth": "1985-05-15",
      "preferences": {
        "favorite_categories": ["whisky", "wine"],
        "preferred_contact_method": "sms"
      },
      "loyalty_points": 0,
      "created_at": "2025-03-21T17:05:30Z"
    },
    "message": "Customer created successfully",
    "timestamp": "2025-03-21T17:05:30Z"
  }
  ```

#### 156. Get Customer Details
- **Endpoint**: `GET /api/customers/{customer_id}`
- **Description**: Get detailed information for a specific customer
- **Request Headers**: Authorization: Bearer {token}
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655537777",
      "name": "Rajesh Sharma",
      "phone": "+919876543210",
      "email": "rajesh@example.com",
      "address": "456 Park Avenue, Delhi",
      "date_of_birth": "1978-09-23",
      "preferences": {
        "favorite_categories": ["whisky", "rum"],
        "preferred_contact_method": "email"
      },
      "loyalty": {
        "points": 456,
        "tier": "silver",
        "next_tier": "gold",
        "points_to_next_tier": 44
      },
      "purchase_history": {
        "total_purchases": 24,
        "total_amount": 45680,
        "average_purchase": 1903,
        "first_purchase_date": "2024-05-10T10:15:00Z",
        "last_purchase_date": "2025-03-15T14:30:00Z",
        "recent_purchases": [
          {
            "id": "550e8400-e29b-41d4-a716-446655540000",
            "date": "2025-03-15T14:30:00Z",
            "amount": 2450,
            "items_count": 3
          },
          {
            "id": "550e8400-e29b-41d4-a716-446655541111",
            "date": "2025-03-01T11:20:00Z",
            "amount": 1840,
            "items_count": 2
          }
        ]
      },
      "notes": "Prefers premium whiskies. Usually buys on weekends.",
      "created_at": "2024-05-10T10:15:00Z",
      "updated_at": "2025-03-15T14:30:00Z"
    },
    "timestamp": "2025-03-21T17:10:30Z"
  }
  ```

#### 157. Update Customer
- **Endpoint**: `PATCH /api/customers/{customer_id}`
- **Description**: Update customer information
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "phone": "+919876543213",
    "address": "789 New Street, Delhi",
    "preferences": {
      "favorite_categories": ["whisky", "rum", "vodka"],
      "preferred_contact_method": "sms"
    }
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655537777",
      "phone": "+919876543213",
      "address": "789 New Street, Delhi",
      "preferences": {
        "favorite_categories": ["whisky", "rum", "vodka"],
        "preferred_contact_method": "sms"
      }
    },
    "message": "Customer updated successfully",
    "timestamp": "2025-03-21T17:15:30Z"
  }
  ```

#### 158. Update Loyalty Points
- **Endpoint**: `POST /api/customers/{customer_id}/loyalty-points`
- **Description**: Add or remove loyalty points for a customer
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "action": "add",
    "points": 25,
    "reason": "Special promotion",
    "reference_id": "PROMO-123",
    "notes": "Birthday month bonus"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655537777",
      "previous_points": 456,
      "points_change": 25,
      "current_points": 481,
      "reason": "Special promotion",
      "tier": "silver",
      "transaction_id": "550e8400-e29b-41d4-a716-446655542222",
      "timestamp": "2025-03-21T17:20:30Z"
    },
    "message": "Loyalty points updated successfully",
    "timestamp": "2025-03-21T17:20:30Z"
  }
  ```

### Promotions & Discount Management APIs

#### 159. List Promotions
- **Endpoint**: `GET /api/promotions`
- **Description**: Get a list of active promotions
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `page`: Page number (default: 1)
  - `limit`: Items per page (default: 20)
  - `status`: Filter by status (active/upcoming/expired)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "promotions": [
        {
          "id": "550e8400-e29b-41d4-a716-446655543333",
          "name": "Weekend Whisky Special",
          "description": "10% off on all whisky products",
          "discount_type": "percentage",
          "discount_value": 10,
          "applicable_categories": ["whisky"],
          "applicable_brands": [],
          "min_purchase_amount": 1000,
          "start_date": "2025-03-22T00:00:00Z",
          "end_date": "2025-03-23T23:59:59Z",
          "status": "upcoming"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655544444",
          "name": "Bulk Buy Offer",
          "description": "Buy 5 or more beers and get ₹50 off",
          "discount_type": "fixed",
          "discount_value": 50,
          "applicable_categories": ["beer"],
          "applicable_brands": [],
          "min_quantity": 5,
          "start_date": "2025-03-15T00:00:00Z",
          "end_date": "2025-03-31T23:59:59Z",
          "status": "active"
        }
      ],
      "pagination": {
        "total": 8,
        "page": 1,
        "limit": 20,
        "pages": 1
      }
    },
    "timestamp": "2025-03-21T17:25:30Z"
  }
  ```

#### 160. Create Promotion
- **Endpoint**: `POST /api/promotions`
- **Description**: Create a new promotion
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "name": "Holiday Special",
    "description": "Flat ₹100 off on purchase of ₹2000 or more",
    "discount_type": "fixed",
    "discount_value": 100,
    "applicable_categories": [],
    "applicable_brands": [],
    "min_purchase_amount": 2000,
    "max_discount_amount": 100,
    "usage_limit": 1,
    "start_date": "2025-04-01T00:00:00Z",
    "end_date": "2025-04-10T23:59:59Z",
    "shops": ["550e8400-e29b-41d4-a716-446655442222", "550e8400-e29b-41d4-a716-446655444444"]
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655545555",
      "name": "Holiday Special",
      "description": "Flat ₹100 off on purchase of ₹2000 or more",
      "discount_type": "fixed",
      "discount_value": 100,
      "applicable_categories": [],
      "applicable_brands": [],
      "min_purchase_amount": 2000,
      "max_discount_amount": 100,
      "usage_limit": 1,
      "start_date": "2025-04-01T00:00:00Z",
      "end_date": "2025-04-10T23:59:59Z",
      "shops": [
        {
          "id": "550e8400-e29b-41d4-a716-446655442222",
          "name": "Downtown Shop"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655444444",
          "name": "Mall Branch"
        }
      ],
      "status": "upcoming",
      "created_at": "2025-03-21T17:30:30Z"
    },
    "message": "Promotion created successfully",
    "timestamp": "2025-03-21T17:30:30Z"
  }
  ```

#### 161. Update Promotion
- **Endpoint**: `PATCH /api/promotions/{promotion_id}`
- **Description**: Update promotion details
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "description": "Flat ₹100 off on purchase of ₹1800 or more",
    "min_purchase_amount": 1800,
    "end_date": "2025-04-15T23:59:59Z"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655545555",
      "description": "Flat ₹100 off on purchase of ₹1800 or more",
      "min_purchase_amount": 1800,
      "end_date": "2025-04-15T23:59:59Z"
    },
    "message": "Promotion updated successfully",
    "timestamp": "2025-03-21T17:35:30Z"
  }
  ```

#### 162. Deactivate Promotion
- **Endpoint**: `POST /api/promotions/{promotion_id}/deactivate`
- **Description**: Deactivate a promotion
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "reason": "Strategy change"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655545555",
      "status": "inactive",
      "deactivation_reason": "Strategy change",
      "deactivated_at": "2025-03-21T17:40:30Z"
    },
    "message": "Promotion deactivated successfully",
    "timestamp": "2025-03-21T17:40:30Z"
  }
  ```

### Forecasting & Analytics APIs

#### 163. Get Sales Forecast
- **Endpoint**: `GET /api/analytics/forecast/sales`
- **Description**: Get sales forecast for upcoming period
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `shop_id`: Shop ID (optional)
  - `period`: Forecast period (week/month/quarter)
  - `granularity`: Data granularity (day/week/month)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "period": "month",
      "forecast_generated_at": "2025-03-21T17:45:30Z",
      "forecast_period_start": "2025-04-01T00:00:00Z",
      "forecast_period_end": "2025-04-30T23:59:59Z",
      "total_forecast": {
        "sales_amount": 980000,
        "transaction_count": 2450,
        "growth_percentage": 5.2
      },
      "by_category": [
        {
          "category": "whisky",
          "sales_amount": 460600,
          "percentage": 47,
          "growth_percentage": 3.8
        },
        {
          "category": "beer",
          "sales_amount": 196000,
          "percentage": 20,
          "growth_percentage": 8.4
        },
        {
          "category": "vodka",
          "sales_amount": 147000,
          "percentage": 15,
          "growth_percentage": 6.2
        },
        {
          "category": "rum",
          "sales_amount": 98000,
          "percentage": 10,
          "growth_percentage": 2.5
        },
        {
          "category": "wine",
          "sales_amount": 78400,
          "percentage": 8,
          "growth_percentage": 7.6
        }
      ],
      "daily_forecast": [
        {
          "date": "2025-04-01",
          "sales_amount": 29400,
          "transaction_count": 73
        },
        {
          "date": "2025-04-02",
          "sales_amount": 27440,
          "transaction_count": 68
        }
      ],
      "accuracy_metrics": {
        "historical_mape": 4.8,
        "confidence_level": 92
      }
    },
    "timestamp": "2025-03-21T17:45:30Z"
  }
  ```

#### 164. Get Inventory Forecast
- **Endpoint**: `GET /api/analytics/forecast/inventory`
- **Description**: Get inventory demand forecast
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `shop_id`: Shop ID (optional)
  - `period`: Forecast period (week/month/quarter)
  - `category`: Filter by category (optional)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "period": "month",
      "forecast_generated_at": "2025-03-21T17:50:30Z",
      "forecast_period_start": "2025-04-01T00:00:00Z",
      "forecast_period_end": "2025-04-30T23:59:59Z",
      "top_brands_forecast": [
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655454444",
          "brand_name": "Royal Stag Premium",
          "category": "whisky",
          "current_stock": 60,
          "forecasted_demand": 185,
          "recommended_stock": 210,
          "recommended_purchase": 150
        },
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655455555",
          "brand_name": "Kingfisher Strong",
          "category": "beer",
          "current_stock": 120,
          "forecasted_demand": 340,
          "recommended_stock": 380,
          "recommended_purchase": 260
        }
      ],
      "category_forecast": [
        {
          "category": "whisky",
          "current_stock": 420,
          "forecasted_demand": 960,
          "recommended_stock": 1100,
          "recommended_purchase": 680
        },
        {
          "category": "beer",
          "current_stock": 560,
          "forecasted_demand": 1200,
          "recommended_stock": 1300,
          "recommended_purchase": 740
        }
      ],
      "low_stock_risk": [
        {
          "brand_id": "550e8400-e29b-41d4-a716-446655461111",
          "brand_name": "Blenders Pride",
          "category": "whisky",
          "current_stock": 15,
          "forecasted_demand": 95,
          "risk_level": "high",
          "recommended_purchase": 100,
          "recommended_purchase_date": "2025-03-25"
        }
      ],
      "accuracy_metrics": {
        "historical_mape": 5.7,
        "confidence_level": 90
      }
    },
    "timestamp": "2025-03-21T17:50:30Z"
  }
  ```

#### 165. Get Brand Performance Analytics
- **Endpoint**: `GET /api/analytics/brands/{brand_id}/performance`
- **Description**: Get detailed performance analytics for a specific brand
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `period`: Analysis period (week/month/quarter/year)
  - `shop_id`: Filter by shop (optional)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "brand": {
        "id": "550e8400-e29b-41d4-a716-446655454444",
        "name": "Royal Stag Premium",
        "category": "whisky",
        "size": "750ml"
      },
      "period": "month",
      "period_start": "2025-02-21T00:00:00Z",
      "period_end": "2025-03-21T23:59:59Z",
      "sales_summary": {
        "total_units": 450,
        "total_amount": 301500,
        "average_daily_units": 15,
        "average_daily_amount": 10050,
        "growth_vs_previous": 8.2
      },
      "pricing_analysis": {
        "average_selling_price": 670,
        "margin_percentage": 13.4,
        "discount_percentage": 4.5,
        "price_elasticity": -1.2
      },
      "shop_performance": [
        {
          "shop_id": "550e8400-e29b-41d4-a716-446655442222",
          "shop_name": "Downtown Shop",
          "units_sold": 185,
          "sales_amount": 123950,
          "percentage_of_total": 41.1
        },
        {
          "shop_id": "550e8400-e29b-41d4-a716-446655444444",
          "shop_name": "Mall Branch",
          "units_sold": 160,
          "sales_amount": 107200,
          "percentage_of_total": 35.6
        },
        {
          "shop_id": "550e8400-e29b-41d4-a716-446655447777",
          "shop_name": "Highway Outlet",
          "units_sold": 105,
          "sales_amount": 70350,
          "percentage_of_total": 23.3
        }
      ],
      "time_analysis": {
        "peak_day": "Saturday",
        "peak_hour": "19:00",
        "daily_distribution": [
          {
            "day": "Monday",
            "units": 45,
            "percentage": 10
          },
          {
            "day": "Tuesday",
            "units": 50,
            "percentage": 11.1
          }
        ]
      },
      "customer_demographics": {
        "top_customer_segment": "25-34 years",
        "repeat_purchase_rate": 68,
        "new_vs_returning": {
          "new": 32,
          "returning": 68
        }
      },
      "competitor_analysis": {
        "market_share": 23.5,
        "rank_in_category": 1,
        "top_competitors": [
          {
            "brand_name": "Blenders Pride",
            "market_share": 18.2
          },
          {
            "brand_name": "McDowells No.1",
            "market_share": 15.8
          }
        ]
      }
    },
    "timestamp": "2025-03-21T17:55:30Z"
  }
  ```

### Shift Management APIs

#### 166. List Shifts
- **Endpoint**: `GET /api/shifts`
- **Description**: Get shifts for a shop
- **Request Headers**: Authorization: Bearer {token}
- **Query Parameters**:
  - `shop_id`: Shop ID (required)
  - `start_date`: Start date (default: today)
  - `end_date`: End date (default: today)
  - `user_id`: Filter by user (optional)
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "shifts": [
        {
          "id": "550e8400-e29b-41d4-a716-446655546666",
          "shop": {
            "id": "550e8400-e29b-41d4-a716-446655442222",
            "name": "Downtown Shop"
          },
          "user": {
            "id": "550e8400-e29b-41d4-a716-446655448888",
            "name": "Rahul Kumar Singh"
          },
          "date": "2025-03-21",
          "start_time": "09:00:00",
          "end_time": "17:00:00",
          "status": "completed",
          "opening_cash": 2000,
          "closing_cash": 37500,
          "sales_amount": 42000,
          "handover_to": {
            "id": "550e8400-e29b-41d4-a716-446655547777",
            "name": "Vikram Mehta"
          }
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655548888",
          "shop": {
            "id": "550e8400-e29b-41d4-a716-446655442222",
            "name": "Downtown Shop"
          },
          "user": {
            "id": "550e8400-e29b-41d4-a716-446655547777",
            "name": "Vikram Mehta"
          },
          "date": "2025-03-21",
          "start_time": "17:00:00",
          "end_time": "22:00:00",
          "status": "in_progress",
          "opening_cash": 37500,
          "closing_cash": null,
          "sales_amount": 18500,
          "handover_to": null
        }
      ]
    },
    "timestamp": "2025-03-21T18:00:30Z"
  }
  ```

#### 167. Start Shift
- **Endpoint**: `POST /api/shifts/start`
- **Description**: Start a new shift
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "shop_id": "550e8400-e29b-41d4-a716-446655442222",
    "start_time": "09:00:00",
    "opening_cash": 2000,
    "handover_from_id": "550e8400-e29b-41d4-a716-446655547777",
    "notes": "Opening with float from yesterday's closing"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655549999",
      "shop": {
        "id": "550e8400-e29b-41d4-a716-446655442222",
        "name": "Downtown Shop"
      },
      "user": {
        "id": "550e8400-e29b-41d4-a716-446655448888",
        "name": "Rahul Kumar Singh"
      },
      "date": "2025-03-22",
      "start_time": "09:00:00",
      "status": "in_progress",
      "opening_cash": 2000,
      "handover_from": {
        "id": "550e8400-e29b-41d4-a716-446655547777",
        "name": "Vikram Mehta"
      },
      "notes": "Opening with float from yesterday's closing",
      "created_at": "2025-03-22T09:00:30Z"
    },
    "message": "Shift started successfully",
    "timestamp": "2025-03-22T09:00:30Z"
  }
  ```

#### 168. End Shift
- **Endpoint**: `POST /api/shifts/{shift_id}/end`
- **Description**: End the current shift
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "end_time": "17:00:00",
    "closing_cash": 35600,
    "handover_to_id": "550e8400-e29b-41d4-a716-446655547777",
    "summary": {
      "total_sales": 38000,
      "cash_sales": 31000,
      "upi_sales": 7000,
      "expenses": 400,
      "returns": 0
    },
    "notes": "All reconciled. No issues reported."
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655549999",
      "status": "completed",
      "end_time": "17:00:00",
      "closing_cash": 35600,
      "summary": {
        "total_sales": 38000,
        "cash_sales": 31000,
        "upi_sales": 7000,
        "expenses": 400,
        "returns": 0
      },
      "handover_to": {
        "id": "550e8400-e29b-41d4-a716-446655547777",
        "name": "Vikram Mehta"
      },
      "notes": "All reconciled. No issues reported.",
      "completed_at": "2025-03-22T17:00:30Z"
    },
    "message": "Shift ended successfully",
    "timestamp": "2025-03-22T17:00:30Z"
  }
  ```

### Gift Card & Voucher APIs

#### 169. Create Gift Card
- **Endpoint**: `POST /api/gift-cards`
- **Description**: Create a new gift card
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "amount": 2000,
    "type": "gift_card",
    "recipient_name": "Suresh Kumar",
    "recipient_phone": "+919876543214",
    "message": "Happy Birthday!",
    "expires_at": "2026-03-22T23:59:59Z",
    "design_template": "birthday"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655550000",
      "code": "GC-ABCDEFGH",
      "amount": 2000,
      "balance": 2000,
      "type": "gift_card",
      "recipient_name": "Suresh Kumar",
      "recipient_phone": "+919876543214",
      "message": "Happy Birthday!",
      "expires_at": "2026-03-22T23:59:59Z",
      "design_template": "birthday",
      "status": "active",
      "issued_at": "2025-03-22T10:00:30Z",
      "issued_by": {
        "id": "550e8400-e29b-41d4-a716-446655448888",
        "name": "Rahul Kumar Singh"
      }
    },
    "message": "Gift card created successfully",
    "timestamp": "2025-03-22T10:00:30Z"
  }
  ```

#### 170. Verify Gift Card
- **Endpoint**: `POST /api/gift-cards/verify`
- **Description**: Verify a gift card or voucher
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "code": "GC-ABCDEFGH"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655550000",
      "code": "GC-ABCDEFGH",
      "amount": 2000,
      "balance": 2000,
      "type": "gift_card",
      "status": "active",
      "expires_at": "2026-03-22T23:59:59Z",
      "is_valid": true
    },
    "timestamp": "2025-03-22T10:05:30Z"
  }
  ```

#### 171. Redeem Gift Card
- **Endpoint**: `POST /api/gift-cards/redeem`
- **Description**: Redeem a gift card or voucher
- **Request Headers**: Authorization: Bearer {token}
- **Request Body**:
  ```json
  {
    "code": "GC-ABCDEFGH",
    "amount": 1200,
    "sale_id": "550e8400-e29b-41d4-a716-446655551111"
  }
  ```
- **Response**:
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655550000",
      "code": "GC-ABCDEFGH",
      "amount_redeemed": 1200,
      "previous_balance": 2000,
      "new_balance": 800,
      "status": "partially_redeemed",
      "transaction_id": "550e8400-e29b-41d4-a716-446655552222",
      "redeemed_at": "2025-03-22T10:10:30Z",
      "redeemed_by": {
        "id": "550e8400-e29b-41d4-a716-446655448888",
        "name": "Rahul Kumar Singh"
      }
    },
    "message": "Gift card redeemed successfully",
    "timestamp": "2025-03-22T10:10:30Z"
  }
  ```

With these additional APIs, the Liquor Shop Management System now provides an exceptionally comprehensive set of functionality to handle all aspects of the business. The complete API suite includes 171 fully-specified endpoints that cover everything from core operations to specialized business needs.